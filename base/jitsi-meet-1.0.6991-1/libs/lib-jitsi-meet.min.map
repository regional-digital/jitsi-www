{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/jquery/dist/jquery.slim.min.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/e2ee/E2EEErrors.ts","webpack://JitsiMeetJS/./modules/e2ee/SAS.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/RoomMetadata.ts","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/async/dist/async.mjs","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/litemode/LiteModeContext.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/trackRecorder.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/CustomSignalingLayer.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.ts","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","const ljm = require('./JitsiMeetJS').default;\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(ljm);\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceLandmarks = [];\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} isNowDominantSpeaker - If true, the user will be accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker, silence) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n\n    /**\n     * Gets the face landmarks of the user.\n     *\n     * @returns {Object}\n     */\n    getFaceLandmarks() {\n        return this._faceLandmarks;\n    }\n\n    /**\n     * Sets the face landmarks of the user.\n     *\n     * @param {Object} faceLandmarks - object with face expressions.\n     * @returns {void}\n     */\n    setFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks = faceLandmarks;\n    }\n\n    /**\n     * Adds new face landmarks to speaker stats.\n     *\n     * @param  {string} faceExpression\n     * @param {number} duration\n     */\n    addFaceLandmarks(faceLandmarks) {\n        this._faceLandmarks.push(faceLandmarks);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {boolean} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * AV1 codec mime type.\n     */\n    AV1: 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC: 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","export enum RTCEvents {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED = 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED = 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n    DATA_CHANNEL_CLOSED = 'rtc.data_channel_closed',\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED = 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED = 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED = 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED = 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Designates an event indicating that some received video SSRCs will now map to\n     * new remote sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that some received audio SSRCs will now map to\n     * new remote sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped'\n};\n\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const DATA_CHANNEL_CLOSED = RTCEvents.DATA_CHANNEL_CLOSED;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop'\n};\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","export const LOCAL_JID = 'local'\n","export enum XMPPEvents {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n    ETHERPAD = 'xmpp.etherpad',\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n    FOCUS_LEFT = 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING = 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS = 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    /**\n     * The conference was redirected to a visitor node.\n     */\n    REDIRECTED = 'xmpp.redirected',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED = 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS = 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received'\n};\n","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * The conference is redirected to a visitor node.\n     */\n    REDIRECTED = 'conference.redirected',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n};\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const REDIRECTED = JitsiConferenceErrors.REDIRECTED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\n\nexport enum JitsiConferenceEvents {\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the call\n     * and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service (ex. CallStats if enabled),\n     * before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A connection to the video bridge's data channel has been closed.\n     * This event is only emitted in \n     */\n    DATA_CHANNEL_CLOSED = 'conference.dataChannelClosed',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Indicates that a the value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates the state of sources attached to a given remote participant has changed.\n     */\n    PARTICIPANT_SOURCE_UPDATED = 'conference.participant_source_updated',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName}\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that the local user has started muted.\n     */\n    STARTED_MUTED = 'conference.started_muted',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the call\n     * and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated',\n\n    E2EE_VERIFICATION_AVAILABLE = 'conference.e2ee.verification.available',\n\n    E2EE_VERIFICATION_READY = 'conference.e2ee.verification.ready',\n\n    E2EE_VERIFICATION_COMPLETED = 'conference.e2ee.verification.completed'\n};\n\n// exported for backward compatibility\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DATA_CHANNEL_CLOSED = JitsiConferenceEvents.DATA_CHANNEL_CLOSED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const E2EE_VERIFICATION_AVAILABLE = JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE;\nexport const E2EE_VERIFICATION_READY = JitsiConferenceEvents.E2EE_VERIFICATION_READY;\nexport const E2EE_VERIFICATION_COMPLETED = JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const PARTICIPANT_SOURCE_UPDATED = JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const STARTED_MUTED = JitsiConferenceEvents.STARTED_MUTED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\n","export enum JitsiTrackEvents {\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or because\n     *   of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * An SSRC has been remapped. The track is now associated with a new participant.\n     */\n    TRACK_OWNER_CHANGED = 'track.owner_changed',\n\n    /**\n     * A track is being removed. Fired when a session terminates for tracks\n     * that persist in ssrc-rewriting mode.\n     */\n    TRACK_REMOVED = 'track.removed',\n};\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\nexport const TRACK_OWNER_CHANGED = JitsiTrackEvents.TRACK_OWNER_CHANGED;\nexport const TRACK_REMOVED = JitsiTrackEvents.TRACK_REMOVED;\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || new Error().stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * was received.\n     */\n    ACTION_JINGLE_TR_RECEIVED = 'transport-replace.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a transport-replace\n     * succeeded (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_TR_SUCCESS = 'transport-replace.success',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n     * because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted'\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JINGLE_TR_RECEIVED = AnalyticsEvents.ACTION_JINGLE_TR_RECEIVED;\nexport const ACTION_JINGLE_TR_SUCCESS = AnalyticsEvents.ACTION_JINGLE_TR_SUCCESS;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => ( {\n    action: 'bridge.down',\n    actionSubject: 'bridge.down',\n    type: TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = ( errorType: unknown, errorMessage: unknown, details: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'connection.failed',\n    attributes: {\n        'error_type': errorType,\n        'error_message': errorMessage,\n        ...details\n    }\n} );\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = ( action: string, attributes: object ) => ( {\n    action,\n    attributes,\n    source: 'conference',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = ( stage: unknown, attributes: object ) => ( {\n    action: 'connection.stage.reached',\n    actionSubject: stage,\n    attributes,\n    source: 'connection.stage.reached',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = ( participantId: unknown, region: unknown, rtt: unknown ) => ( {\n    attributes: {\n        'participant_id': participantId,\n        region,\n        rtt\n    },\n    name: 'e2e_rtt',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => ( {\n    action: 'focus.left',\n    actionSubject: 'focus.left',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = ( action: 'error' | 'success' | 'warning' | string, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'get.user.media',\n    action,\n    attributes\n} );\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'peer.conn.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = ( attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    source: 'track.streaming.status',\n    action: 'duration',\n    attributes\n} );\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'jingle',\n    attributes\n} );\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = ( mediaType: 'audio' | 'video' | string, value: unknown ) => ( {\n    attributes: {\n        'media_type': mediaType,\n        value\n    },\n    action: 'track.no.data.from.source',\n    type: AnalyticsEvents.TYPE_OPERATIONAL\n} );\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = ( action: unknown, attributes: object = {} ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action,\n    source: 'p2p',\n    attributes\n} )\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = ( mediaType: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'remotely.muted',\n    mediaType\n} );\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtp.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'rtt.by.region',\n    attributes\n} );\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = ( attributes: object ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'transport.stats',\n    attributes\n} );\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent = ( userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'audio.output.problem',\n    attributes: {\n        userID,\n        localAudioLevels,\n        remoteAudioLevels\n    }\n} );\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = ( code: string, reason: string ) => ( {\n    type: AnalyticsEvents.TYPE_OPERATIONAL,\n    action: 'bridge-channel.error',\n    attributes: {\n        code,\n        reason\n    }\n} );\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = ( attributes: object ) => createConnectionStageReachedEvent( 'ttfm', attributes );\n","export enum Events {\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit some logs that will end up in stats services like\n     * CallStats (if enabled).\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n};\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        return this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Firefox and Safari\n     * because of issues with rendering. Please check https://bugzilla.mozilla.org/show_bug.cgi?id=1492500,\n     * https://bugs.webkit.org/show_bug.cgi?id=231071 and https://bugs.webkit.org/show_bug.cgi?id=231074 for details.\n     */\n    supportsVP9() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        // We do not want to enable unified plan on Electron clients that have Chromium version < 96 because of\n        // performance and screensharing issues.\n        return !(this.isElectron() && (this._getChromiumBasedVersion() < 96));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {object} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n\n/**\n * Initialize the audio context on startup.\n */\nLocalStatsCollector.connectAudioContext();\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            let audioCodec;\n            let videoCodec;\n\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n\n                if (ssrcStats.framerate > 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n\n                const userCodecs = codecs[participantId] ?? { };\n\n                userCodecs[ssrc] = {\n                    audio: audioCodec,\n                    video: videoCodec\n                };\n\n                codecs[participantId] = userCodecs;\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            if (before) {\n                const packetsBefore = this.getNonNegativeValue(before[key]);\n                const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n                const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n                const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n                const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n                ssrcStats.setLoss({\n                    packetsTotal: packetsDiff + packetsLostDiff,\n                    packetsLost: packetsLostDiff,\n                    isDownloadStream\n                });\n            }\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                if (before) {\n                    ssrcStats.addBitrate({\n                        'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                        'upload': 0\n                    });\n                }\n            } else if (before) {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    if (Object.keys(byteSentStats).length) {\n        this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    }\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n    let confID = this.options.confID;\n\n    // confID - domain/tenant/roomName\n    // roomName - meeting name or breakout room ID\n    // For breakout rooms we change the conference ID used for callstats to use\n    // the room ID instead of the meeting name\n    if (!confID.endsWith(this.options.roomName)) {\n        confID = `${this.options.confID.slice(0, this.options.confID.lastIndexOf('/'))}/${this.options.roomName}`;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n * @param {boolean} silence - Whether the dominant speaker is silent or not.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid, silence) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid, silence);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { VideoType } from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_REMOVED, track => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n    chatRoom.addListener(XMPPEvents.ROOM_MAX_USERS_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.REDIRECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.REDIRECTED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n    chatRoom.addListener(XMPPEvents.RESERVATION_ERROR, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n    chatRoom.addListener(XMPPEvents.MUC_DESTROYED, () => conference.leave());\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_METADATA_UPDATED,\n        JitsiConferenceEvents.METADATA_UPDATED);\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_CLOSED, ev => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_CLOSED, ev);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.VIDEO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        for (const session of this.conference.getMediaSessions()) {\n            session.processSourceMap(msg, MediaType.AUDIO);\n        }\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            if (audioMuted) {\n                conference.isMutedByFocus = true;\n            }\n\n            if (videoMuted) {\n                conference.isVideoMutedByFocus = true;\n            }\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { MediaType } from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n\n        /**\n         * Remote sources associated with the participant in the following format.\n         * Map<mediaType, Map<sourceName, sourceInfo>>\n         *\n         * mediaType - 'audio' or 'video'.\n         * sourceName - name of the remote source.\n         * sourceInfo: {\n         *   muted: boolean;\n         *   videoType: string;\n         * }\n         */\n        this._sources = new Map();\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and which belong to this\n     * JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified mediaType and which belong to this\n     * JitsiParticipant are muted; otherwise, false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * Sets source info.\n     * @param {MediaType} mediaType The media type, 'audio' or 'video'.\n     * @param {boolean} muted The new muted state.\n     * @param {string} sourceName The name of the source.\n     * @param {string} videoType The video type of the source.\n     * @returns {void}\n     */\n    _setSources(mediaType, muted, sourceName, videoType) {\n        let sourceByMediaType = this._sources.get(mediaType);\n        const sourceInfo = {\n            muted,\n            videoType\n        };\n\n        if (sourceByMediaType?.size) {\n            sourceByMediaType.set(sourceName, sourceInfo);\n\n            return;\n        }\n\n        sourceByMediaType = new Map();\n        sourceByMediaType.set(sourceName, sourceInfo);\n        this._sources.set(mediaType, sourceByMediaType);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid() {\n        return this._connectionJid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Returns the sources associated with this participant.\n     * @returns Map<string, Map<string, Object>>\n     */\n    getSources() {\n        return this._sources;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder() {\n        return this._identity?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid) {\n        this._connectionJid = newJid;\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * Indicates that the performed action cannot be executed because the\n     * connection is not in the correct state(connected, disconnected, etc.)\n     */\n    WRONG_STATE = 'connection.wrongState',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const WRONG_STATE = JitsiConnectionEvents.WRONG_STATE;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n};\n\n// exported for backward compatibility\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger(__filename);\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        if (!enabled) {\n            this.e2eeCtx.cleanupAll();\n        }\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Sets the key for End-to-End encryption.\n     *\n     * @returns {void}\n     */\n    setEncryptionKey() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","export enum E2EEErrors {\n    E2EE_SAS_KEYS_MAC_MISMATCH = 'e2ee.sas.keys-mac-mismatch',\n    E2EE_SAS_MAC_MISMATCH = 'e2ee.sas.mac-mismatch',\n    E2EE_SAS_MISSING_KEY =  'e2ee.sas.missing-key',\n    E2EE_SAS_COMMITMENT_MISMATCHED =  'e2ee.sas.commitment-mismatched',\n    E2EE_SAS_CHANNEL_VERIFICATION_FAILED = 'e2ee.sas.channel-verification-failed',\n    E2EE_SAS_INVALID_SAS_VERIFICATION =  'e2ee.sas.invalid-sas-verification',\n}\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n\n/**\n * Generates a SAS composed of decimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateDecimalSas(sasBytes) {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000\n    ];\n}\n\nconst emojiMapping = [\n    [ '🐶', 'dog' ],\n    [ '🐱', 'cat' ],\n    [ '🦁', 'lion' ],\n    [ '🐎', 'horse' ],\n    [ '🦄', 'unicorn' ],\n    [ '🐷', 'pig' ],\n    [ '🐘', 'elephant' ],\n    [ '🐰', 'rabbit' ],\n    [ '🐼', 'panda' ],\n    [ '🐓', 'rooster' ],\n    [ '🐧', 'penguin' ],\n    [ '🐢', 'turtle' ],\n    [ '🐟', 'fish' ],\n    [ '🐙', 'octopus' ],\n    [ '🦋', 'butterfly' ],\n    [ '🌷', 'flower' ],\n    [ '🌳', 'tree' ],\n    [ '🌵', 'cactus' ],\n    [ '🍄', 'mushroom' ],\n    [ '🌏', 'globe' ],\n    [ '🌙', 'moon' ],\n    [ '☁️', 'cloud' ],\n    [ '🔥', 'fire' ],\n    [ '🍌', 'banana' ],\n    [ '🍎', 'apple' ],\n    [ '🍓', 'strawberry' ],\n    [ '🌽', 'corn' ],\n    [ '🍕', 'pizza' ],\n    [ '🎂', 'cake' ],\n    [ '❤️', 'heart' ],\n    [ '🙂', 'smiley' ],\n    [ '🤖', 'robot' ],\n    [ '🎩', 'hat' ],\n    [ '👓', 'glasses' ],\n    [ '🔧', 'spanner' ],\n    [ '🎅', 'santa' ],\n    [ '👍', 'thumbs up' ],\n    [ '☂️', 'umbrella' ],\n    [ '⌛', 'hourglass' ],\n    [ '⏰', 'clock' ],\n    [ '🎁', 'gift' ],\n    [ '💡', 'light bulb' ],\n    [ '📕', 'book' ],\n    [ '✏️', 'pencil' ],\n    [ '📎', 'paperclip' ],\n    [ '✂️', 'scissors' ],\n    [ '🔒', 'lock' ],\n    [ '🔑', 'key' ],\n    [ '🔨', 'hammer' ],\n    [ '☎️', 'telephone' ],\n    [ '🏁', 'flag' ],\n    [ '🚂', 'train' ],\n    [ '🚲', 'bicycle' ],\n    [ '✈️', 'aeroplane' ],\n    [ '🚀', 'rocket' ],\n    [ '🏆', 'trophy' ],\n    [ '⚽', 'ball' ],\n    [ '🎸', 'guitar' ],\n    [ '🎺', 'trumpet' ],\n    [ '🔔', 'bell' ],\n    [ '⚓️', 'anchor' ],\n    [ '🎧', 'headphones' ],\n    [ '📁', 'folder' ],\n    [ '📌', 'pin' ]\n];\n\n/**\n * Generates a SAS composed of defimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateEmojiSas(sasBytes) {\n    // Just like base64.\n    const emojis = [\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6\n    ];\n\n    return emojis.map(num => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas\n};\n\n/**\n * Generates multiple SAS for the given bytes.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns {object}\n */\nexport function generateSas(sasBytes) {\n    const sas = {};\n\n    for (const method in sasGenerators) {\n        if (sasGenerators.hasOwnProperty(method)) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n\n    return sas;\n}\n","/* global Olm */\n\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nimport { E2EEErrors } from './E2EEErrors';\nimport { generateSas } from './SAS';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init',\n    SAS_START: 'sas-start',\n    SAS_ACCEPT: 'sas-accept',\n    SAS_KEY: 'sas-key',\n    SAS_MAC: 'sas-mac'\n};\n\nconst OLM_SAS_NUM_BYTES = 6;\nconst OLM_KEY_VERIFICATION_MAC_INFO = 'Jitsi-KEY_VERIFICATION_MAC';\nconst OLM_KEY_VERIFICATION_MAC_KEY_IDS = 'Jitsi-KEY_IDS';\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_SAS_AVAILABLE: 'olm.participant_sas_available',\n    PARTICIPANT_SAS_READY: 'olm.participant_sas_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated',\n    PARTICIPANT_VERIFICATION_COMPLETED: 'olm.participant_verification_completed'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._mediaKey = undefined;\n        this._mediaKeyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Returns the current participants conference ID.\n     *\n     * @returns {string}\n     */\n    get myId() {\n        return this._conf.myUserId();\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._mediaKey = key;\n        this._mediaKeyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentMediaKey(key) {\n        this._mediaKey = key;\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Sends sacMac if channel verification waas successful.\n     *\n     */\n    markParticipantVerified(participant, isVerified) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        const pId = participant.getId();\n\n        if (!isVerified) {\n            olmData.sasVerification = undefined;\n            logger.warn(`Verification failed for participant ${pId}`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_CHANNEL_VERIFICATION_FAILED);\n\n            return;\n        }\n\n        if (!olmData.sasVerification) {\n            logger.warn(`Participant ${pId} does not have valid sasVerification`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n            return;\n        }\n\n        const { sas, sasMacSent } = olmData.sasVerification;\n\n        if (sas && sas.is_their_key_set() && !sasMacSent) {\n            this._sendSasMac(participant);\n\n            // Mark the MAC as sent so we don't send it multiple times.\n            olmData.sasVerification.sasMacSent = true;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            this._idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeysReady(this._idKeys);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n    }\n\n    /**\n     * Starts the verification process for the given participant as described here\n     * https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     *\n     *    |                                 |\n          | m.key.verification.start        |\n          |-------------------------------->|\n          |                                 |\n          |       m.key.verification.accept |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.key          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.key |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.mac          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.mac |\n          |<--------------------------------|\n          |                                 |\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @returns {Promise<void>}\n     * @private\n     */\n    startVerification(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (!olmData.session) {\n            logger.warn(`Tried to start verification with participant ${pId} but we have no session`);\n\n            return;\n        }\n\n        if (olmData.sasVerification) {\n            logger.warn(`There is already a verification in progress with participant ${pId}`);\n\n            return;\n        }\n\n        olmData.sasVerification = {\n            sas: new Olm.SAS(),\n            transactionId: uuidv4()\n        };\n\n        const startContent = {\n            transactionId: olmData.sasVerification.transactionId\n        };\n\n        olmData.sasVerification.startContent = startContent;\n        olmData.sasVerification.isInitiator = true;\n\n        const startMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_START,\n                data: startContent\n            }\n        };\n\n        this._sendMessage(startMessage, pId);\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeysReady(idKeys) {\n        logger.debug(`Olm id key ready: ${idKeys}`);\n\n        // Publish it in presence.\n        for (const keyType in idKeys) {\n            if (idKeys.hasOwnProperty(keyType)) {\n                const key = idKeys[keyType];\n\n                this._conf.setLocalParticipantProperty(`e2ee.idKey.${keyType}`, key);\n            }\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._mediaKey !== undefined) {\n            keyInfo.key = this._mediaKey ? base64js.fromByteArray(this._mediaKey) : false;\n            keyInfo.keyIndex = this._mediaKeyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_START: {\n            if (!olmData.session) {\n                logger.debug(`Received sas init message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-init');\n\n                return;\n            }\n\n            if (olmData.sasVerification?.sas) {\n                logger.warn(`SAS already created for participant ${pId}`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { transactionId } = msg.data;\n\n            const sas = new Olm.SAS();\n\n            olmData.sasVerification = {\n                sas,\n                transactionId,\n                isInitiator: false\n            };\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n            const commitment = this._computeCommitment(pubKey, msg.data);\n\n            /* The first phase of the verification process, the Key agreement phase\n                https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n            */\n            const acceptMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_ACCEPT,\n                    data: {\n                        transactionId,\n                        commitment\n                    }\n                }\n            };\n\n            this._sendMessage(acceptMessage, pId);\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_ACCEPT: {\n            if (!olmData.session) {\n                logger.debug(`Received sas accept message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-accept');\n\n                return;\n            }\n\n            const { commitment, transactionId } = msg.data;\n\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_ACCEPT Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            if (olmData.sasVerification.sasCommitment) {\n                logger.debug(`Already received sas commitment message from ${pId}!`);\n\n                this._sendError(participant, 'Already received sas commitment message from ${pId}!');\n\n                return;\n            }\n\n            olmData.sasVerification.sasCommitment = commitment;\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n\n            // Send KEY.\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_KEY: {\n            if (!olmData.session) {\n                logger.debug(`Received sas key message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-key');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_KEY Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { isInitiator, sas, sasCommitment, startContent, keySent } = olmData.sasVerification;\n\n            if (sas.is_their_key_set()) {\n                logger.warn('SAS already has their key!');\n\n                return;\n            }\n\n            const { key: theirKey, transactionId } = msg.data;\n\n            if (sasCommitment) {\n                const commitment = this._computeCommitment(theirKey, startContent);\n\n                if (sasCommitment !== commitment) {\n                    this._sendError(participant, 'OlmAdapter commitments mismatched');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_COMMITMENT_MISMATCHED);\n                    olmData.sasVerification.free();\n\n                    return;\n                }\n            }\n\n            sas.set_their_key(theirKey);\n\n            const pubKey = sas.get_pubkey();\n\n            const myInfo = `${this.myId}|${pubKey}`;\n            const theirInfo = `${pId}|${theirKey}`;\n\n            const info = isInitiator ? `${myInfo}|${theirInfo}` : `${theirInfo}|${myInfo}`;\n\n            const sasBytes = sas.generate_bytes(info, OLM_SAS_NUM_BYTES);\n            const generatedSas = generateSas(sasBytes);\n\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_READY, pId, generatedSas);\n\n            if (keySent) {\n                return;\n            }\n\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_MAC: {\n            if (!olmData.session) {\n                logger.debug(`Received sas mac message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-mac');\n\n                return;\n            }\n\n            const { keys, mac, transactionId } = msg.data;\n\n            if (!mac || !keys) {\n                logger.warn('Invalid SAS MAC message');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_MAC Participant ${pId} does not have valid sasVerification`);\n\n                return;\n            }\n\n            const sas = olmData.sasVerification.sas;\n\n            // Verify the received MACs.\n            const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${pId}${this.myId}${transactionId}`;\n            const keysMac = sas.calculate_mac(\n                Object.keys(mac).sort().join(','), // eslint-disable-line newline-per-chained-call\n                baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n            );\n\n            if (keysMac !== keys) {\n                logger.error('SAS verification error: keys MAC mismatch');\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_KEYS_MAC_MISMATCH);\n\n                return;\n            }\n\n            if (!olmData.ed25519) {\n                logger.warn('SAS verification error: Missing ed25519 key');\n\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_MISSING_KEY);\n\n                return;\n            }\n\n            for (const [ keyInfo, computedMac ] of Object.entries(mac)) {\n                const ourComputedMac = sas.calculate_mac(\n                    olmData.ed25519,\n                    baseInfo + keyInfo\n                );\n\n                if (computedMac !== ourComputedMac) {\n                    logger.error('SAS verification error: MAC mismatch');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_MAC_MISMATCH);\n\n                    return;\n                }\n            }\n\n            logger.info(`SAS MAC verified for participant ${pId}`);\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED, pId, true);\n\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        const participantId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        case 'e2ee.idKey.ed25519':\n            olmData.ed25519 = newValue;\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_AVAILABLE, participantId);\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKeys.curve25519,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n\n    /**\n     * Builds and sends the SAS MAC message to the given participant.\n     * The second phase of the verification process, the Key verification phase\n        https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     */\n    _sendSasMac(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n        const { sas, transactionId } = olmData.sasVerification;\n\n        // Calculate and send MAC with the keys to be verified.\n        const mac = {};\n        const keyList = [];\n        const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${this.myId}${pId}${transactionId}`;\n\n        const deviceKeyId = `ed25519:${pId}`;\n\n        mac[deviceKeyId] = sas.calculate_mac(\n            this._idKeys.ed25519,\n            baseInfo + deviceKeyId);\n        keyList.push(deviceKeyId);\n\n        const keys = sas.calculate_mac(\n            keyList.sort().join(','),\n            baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n        );\n\n        const macMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_MAC,\n                data: {\n                    keys,\n                    mac,\n                    transactionId\n                }\n            }\n        };\n\n        this._sendMessage(macMessage, pId);\n    }\n\n    /**\n     * Computes the commitment.\n     */\n    _computeCommitment(pubKey, data) {\n        const olmUtil = new Olm.Utility();\n        const commitment = olmUtil.sha256(pubKey + JSON.stringify(data));\n\n        olmUtil.free();\n\n        return commitment;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_READY,\n            this._onParticipantSasReady.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_AVAILABLE,\n            this._onParticipantSasAvailable.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_VERIFICATION_COMPLETED,\n            this._onParticipantVerificationCompleted.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * Returns the sasVerficiation object.\n     *\n     * @returns {Object}\n     */\n    get sasVerification() {\n        return this._olmAdapter;\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles the SAS ready event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {Uint8Array} sas - The bytes from sas.generate_bytes..\n     * @private\n     */\n    _onParticipantSasReady(pId, sas) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_READY, pId, sas);\n    }\n\n    /**\n     * Handles the sas available event.\n     *\n     * @param {string} pId - The participant ID.\n     * @private\n     */\n    _onParticipantSasAvailable(pId) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE, pId);\n    }\n\n\n    /**\n     * Handles the SAS completed event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {boolean} success - Wheter the verification was succesfull.\n     * @private\n     */\n    _onParticipantVerificationCompleted(pId, success, message) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED, pId, success, message);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n\n    /**\n     * Starts the verification process of the participant\n     *\n     * @param {Participant} - participant to be verified.\n     * @returns {void}\n     */\n    startVerification(participant) {\n        this._keyHandler.sasVerification?.startVerification(participant);\n    }\n\n    /**\n     * Marks the channel as verified\n     *\n     * @param {Participant} - participant to be verified.\n     * @param {boolean} isVerified - whether the verification was succesfull.\n     * @returns {void}\n     */\n    markParticipantVerified(participant, isVerified) {\n        this._keyHandler.sasVerification?.markParticipantVerified(participant, isVerified);\n    }\n}\n","\nimport browser from '../browser';\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.ssrcRewritingEnabled - Use SSRC rewriting. Requires sourceNameSignaling to be enabled.\n     */\n    init(flags) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n    }\n\n    /**\n     * Checks if multiple local video streams support is enabled.\n     *\n     * @returns {boolean}\n     */\n    isMultiStreamSendSupportEnabled() {\n        return browser.supportsUnifiedPlan();\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Insertable streams are used to discard\n     * all media before it is decoded). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled() {\n        return this._runInLiteMode && browser.supportsInsertableStreams();\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported() {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import $ from 'jquery';\nimport { Strophe, b64_sha1 } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {Object} - handler for the connection.\n     */\n    addHandler(...args) {\n        return this._stropheConn.addHandler(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.deleteHandler}\n     *\n     * @returns {void}\n     */\n    deleteHandler(...args) {\n        this._stropheConn.deleteHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","export enum JitsiTranscriptionStatus {\n    /**\n     * The transcription is on.\n     */\n    ON = 'on',\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'off'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            const filteredPayload = this._filterUpdatePayload(payload);\n\n            this._rooms = filteredPayload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, filteredPayload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Filters the hidden participants from the payload.\n     *\n     * @param {Object} payload - The payload of the update message.\n     * @return {Object} - The filtered payload.\n     */\n    _filterUpdatePayload(payload) {\n        const hiddenDomain = this.room.options.hiddenDomain;\n        const { rooms } = payload;\n        const filteredRooms = {};\n\n        Object.entries(rooms).forEach(([ key, room ]) => {\n            const { participants = {} } = room;\n            const filteredParticipants = {};\n\n            Object.entries(participants).forEach(([ k, participant ]) => {\n                if (Strophe.getDomainFromJid(participant.jid) !== hiddenDomain) {\n                    filteredParticipants[k] = participant;\n                }\n            });\n\n            filteredRooms[key] = {\n                ...room,\n                participants: filteredParticipants\n            };\n        });\n\n        return {\n            ...payload,\n            rooms: filteredRooms\n        };\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger(__filename);\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* eslint-disable newline-per-chained-call */\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n    const maxTimeout = 120000;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return Math.min(timeout * step, maxTimeout);\n    };\n}\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n    this.options = options;\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n\n    // Whether SIP gateway (jigasi) support is enabled. TODO: use presence so it can be changed based on jigasi\n    // availability.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = xmpp.connection;\n\n    // The JID to which conference-iq requests are sent over XMPP.\n    this.targetJid = this.options.hosts?.focus;\n\n    // If not specified default to 'focus.domain'\n    if (!this.targetJid) {\n        this.targetJid = `focus.${this.options.hosts?.domain}`;\n    }\n\n    this.targetUrl = this.options.conferenceRequestUrl;\n\n    // Whether to send conference requests over HTTP or XMPP\n    this.mode = this.targetUrl ? 'http' : 'xmpp';\n    logger.info(`Using ${this.mode} for conference requests.`);\n\n    // The set of JIDs known to belong to jicofo. Populated from configuration\n    // and responses from conference requests.\n    this.focusUserJids = new Set();\n\n    if (options.focusUserJid) {\n        this.focusUserJids.add(options.focusUserJid);\n    }\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(`Ignoring sessionId from different origin: ${event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\nModerator.prototype.isFocusJid = function(jid) {\n    if (!jid) {\n        return false;\n    }\n\n    for (const focusJid of this.focusUserJids) {\n        // jid may be a full JID, and focusUserJids may be bare JIDs\n        if (jid.indexOf(`${focusJid}/`) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\n/**\n * Create a conference request based on the configured options and saved Settings.\n *\n * A conference request has the following format:\n * {\n *   room: \"room@example.com\",\n *   sessionId: \"foo\", // optional\n *   machineUdi: \"bar\", // optional\n *   identity: \"baz\", // optional\n *   properties: { } // map string to string\n * }\n *\n * It can be encoded in either JSON or and IQ.\n *\n * @returns the created conference request.\n */\nModerator.prototype._createConferenceRequest = function() {\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const config = this.options;\n    const properties = {};\n\n    if (config.startAudioMuted !== undefined) {\n        properties.startAudioMuted = config.startAudioMuted;\n    }\n    if (config.startVideoMuted !== undefined) {\n        properties.startVideoMuted = config.startVideoMuted;\n    }\n\n    // this flag determines whether the bridge will include this call in its\n    // rtcstats reporting or not. If the site admin hasn't set the flag in\n    // config.js, then the client defaults to false (see\n    // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n    // components default to true to match the pre-existing behavior so we only\n    // signal if false.\n    const rtcstatsEnabled = config?.analytics?.rtcstatsEnabled ?? false;\n\n    if (!rtcstatsEnabled) {\n        properties.rtcstatsEnabled = false;\n    }\n\n    const conferenceRequest = {\n        properties,\n        machineUid: Settings.machineId,\n        room: this.roomName\n    };\n\n    if (sessionId) {\n        conferenceRequest.sessionId = sessionId;\n    }\n\n    return conferenceRequest;\n};\n\n/**\n * Create a conference request and encode it as an IQ.\n */\nModerator.prototype._createConferenceIq = function() {\n    const conferenceRequest = this._createConferenceRequest();\n\n    // Generate create conference IQ\n    const elem = $iq({ to: this.targetJid,\n        type: 'set' });\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': conferenceRequest.machineUid\n    });\n\n    if (conferenceRequest.sessionId) {\n        elem.attrs({ 'session-id': conferenceRequest.sessionId });\n    }\n\n    for (const k in conferenceRequest.properties) {\n        if (conferenceRequest.properties.hasOwnProperty(k)) {\n            elem.c(\n                'property', {\n                    name: k,\n                    value: conferenceRequest.properties[k]\n                }).up();\n        }\n    }\n\n    return elem;\n};\n\nModerator.prototype._parseConferenceIq = function(resultIq) {\n    const conferenceRequest = { properties: {} };\n\n    conferenceRequest.focusJid = $(resultIq).find('conference').attr('focusjid');\n    conferenceRequest.sessionId = $(resultIq).find('conference').attr('session-id');\n    conferenceRequest.identity = $(resultIq).find('>conference').attr('identity');\n    conferenceRequest.ready = $(resultIq).find('conference').attr('ready') === 'true';\n    conferenceRequest.vnode = $(resultIq).find('conference').attr('vnode');\n\n    if ($(resultIq).find('>conference>property[name=\\'authentication\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.authentication = 'true';\n    }\n\n    if ($(resultIq).find('>conference>property[name=\\'externalAuth\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.externalAuth = 'true';\n    }\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find('>conference>property[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length > 0) {\n        conferenceRequest.properties.sipGatewayEnabled = 'true';\n    }\n\n    return conferenceRequest;\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.sendConferenceRequest = function() {\n    return new Promise(resolve => {\n        if (this.mode === 'xmpp') {\n            logger.info(`Sending conference request over XMPP to ${this.targetJid}`);\n\n            this.connection.sendIQ(\n                this._createConferenceIq(),\n                result => this._handleIqSuccess(result, resolve),\n                error => this._handleIqError(error, resolve));\n\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for Strophe to\n            // decide to send our IQ.\n            this.connection.flush();\n        } else {\n            logger.info(`Sending conference request over HTTP to ${this.targetUrl}`);\n            fetch(this.targetUrl, {\n                method: 'POST',\n                body: JSON.stringify(this._createConferenceRequest()),\n                headers: { 'Content-Type': 'application/json' }\n            })\n            .then(response => {\n                if (!response.ok) {\n                    response.text().then(text => {\n                        logger.warn(`Received HTTP ${response.status} ${response.statusText}. Body: ${text}`);\n                        const sessionError = response.status === 400 && text.indexOf('400 invalid-session') > 0;\n                        const notAuthorized = response.status === 403;\n\n                        this._handleError(sessionError, notAuthorized, resolve);\n                    })\n                    .catch(error => {\n                        logger.warn(`Error: ${error}`);\n                        this._handleError();\n                    });\n\n                    // _handleError has either scheduled a retry or fired an event indicating failure.\n                    return;\n                }\n                response.json().then(resultJson => {\n                    this._handleSuccess(resultJson, resolve);\n                });\n            })\n            .catch(error => {\n                logger.warn(`Error: ${error}`);\n                this._handleError();\n            });\n        }\n    });\n};\n\nModerator.prototype._handleSuccess = function(conferenceRequest, callback) {\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    if (conferenceRequest.focusJid) {\n        logger.info(`Adding focus JID: ${conferenceRequest.focusJid}`);\n        this.focusUserJids.add(conferenceRequest.focusJid);\n    } else {\n        logger.warn('Conference request response contained no focusJid.');\n    }\n\n    const authenticationEnabled = conferenceRequest.properties.authentication === 'true';\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = conferenceRequest.properties.externalAuth === 'true';\n    logger.info(`External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled && conferenceRequest.sessionId) {\n        logger.info(`Received sessionId: ${conferenceRequest.sessionId}`);\n        Settings.sessionId = conferenceRequest.sessionId;\n    }\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED, authenticationEnabled, conferenceRequest.identity);\n\n    this.sipGatewayEnabled = conferenceRequest.properties.sipGatewayEnabled;\n    logger.info(`Sip gateway enabled: ${this.sipGatewayEnabled}`);\n\n    if (conferenceRequest.ready) {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        if (conferenceRequest.vnode) {\n            logger.warn(`Redirected to: ${conferenceRequest.vnode} with focusJid ${conferenceRequest.focusJid} }`);\n\n            this.eventEmitter.emit(XMPPEvents.REDIRECTED, conferenceRequest.vnode, conferenceRequest.focusJid);\n\n            return;\n        }\n\n        logger.info('Conference-request successful, ready to join the MUC.');\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        // This was a successful response, but the \"ready\" flag is not set. Retry after a timeout.\n        logger.info(`Not ready yet, will retry in ${waitMs} ms.`);\n        window.setTimeout(\n            () => this.sendConferenceRequest().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype._handleError = function(sessionError, notAuthorized, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    if (sessionError) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n\n    // Not authorized to create new room\n    if (notAuthorized) {\n        logger.warn('Unauthorized to start the conference');\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n\n    const waitMs = this.getNextErrorTimeout();\n\n    if (sessionError && waitMs < 60000) {\n        // If the session is invalid, retry a limited number of times and then fire an error.\n        logger.info(`Invalid session, will retry after ${waitMs} ms.`);\n        this.getNextTimeout(true);\n        window.setTimeout(() => this.sendConferenceRequest().then(callback), waitMs);\n    } else {\n        const errmsg = 'Failed to get a successful response, giving up.';\n        const error = new Error(errmsg);\n\n        logger.error(errmsg, error);\n        GlobalOnErrorHandler.callErrorHandler(error);\n\n        // This is a \"fatal\" error and the user of the lib should handle it accordingly.\n        // TODO: change the event name to something accurate.\n        this.eventEmitter.emit(XMPPEvents.FOCUS_DISCONNECTED);\n    }\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that {@link sendConferenceRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqError = function(error, callback) {\n\n    // The reservation system only works over XMPP. Handle the error separately.\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    const invalidSession\n        = Boolean($(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length);\n\n    // Not authorized to create new room\n    const notAuthorized = $(error).find('>error>not-authorized').length > 0;\n\n    if (notAuthorized && Strophe.getDomainFromJid(error.getAttribute('to')) !== this.options.hosts.anonymousdomain) {\n        // FIXME \"is external\" should come either from the focus or\n        // config.js\n        this.externalAuthEnabled = true;\n    }\n\n    this._handleError(invalidSession, notAuthorized, callback);\n};\n\n/**\n * Invoked by {@link #sendConferenecRequest} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that {@link #sendConferenecRequest} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._handleIqSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    const conferenceRequest = this._parseConferenceIq(result);\n\n    this._handleSuccess(conferenceRequest, callback);\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this._createConferenceIq(),\n            result => {\n                const sessionId = $(result).find('conference').attr('session-id');\n\n                if (sessionId) {\n                    logger.info(`Received sessionId:  ${sessionId}`);\n                    Settings.sessionId = sessionId;\n                } else {\n                    logger.warn('Response did not contain a session-id');\n                }\n\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first').prop('tagName'),\n                message: $(errorIq).find('iq>error>text').text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.targetJid,\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, xmpp, options) {\n        super();\n        this.xmpp = xmpp;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joining MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, xmpp.options);\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            // there is no point of sending conference iq when in visitor mode\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.sendConferenceRequest();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(JSON.parse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established, only if needed\n        if (status === XmppConnection.Status.CONNECTED && this.presenceUpdateTime > this.presenceSyncTime) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus = this.moderator.isFocusJid(jid);\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                const tags = [ 'id', 'name', 'avatar' ];\n\n                if (this.options.hiddenFromRecorderFeatureEnabled) {\n                    tags.push('hidden-from-recorder');\n                }\n\n                for (const tag of tags) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.log('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    // Log if Jicofo supports restart by terminate only once. This conference property does not change\n                    // during the call.\n                    if (typeof this.restartByTerminateSupported === 'undefined') {\n                        this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                        logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                    }\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                delete this.lastPresences[jid];\n                if (!member.isFocus) {\n                    this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n                }\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            const member = this.members[from];\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            delete this.lastPresences[from];\n\n            // In this case we *do* fire MUC_MEMBER_LEFT for the focus?\n            this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, from, reason);\n            if (member?.isFocus) {\n                logger.info('Focus has left the room - leaving conference');\n                this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            } else {\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\n                // everything is updated\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\n\n                if (lobbyRoomOldNode.length) {\n                    lobbyRoomJid = lobbyRoomOldNode.text();\n                }\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': Strophe.getBareJidFromJid(m.jid)\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     * Obtains the info about given media advertised (in legacy format) in the MUC presence of the participant\n     * identified by the given endpoint JID. This is for mantining interop with endpoints that do not support\n     * source-name signaling (Jigasi and very old mobile clients).\n     *\n     * @param {string} endpointId the endpoint ID mapped to the participant which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence info or <tt>null</tt> either if there\n     * is no presence available or if the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            timeout = setTimeout(() => onMucLeft(true), 5000);\n\n            this.clean();\n            this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave(reason);\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: sourceCompactJson.n\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n};\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const audio = this._getAudioConstraints();\n        let video = {};\n        const { desktopSharingFrameRate } = this.options;\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia on any of the\n        // browsers. getDisplayMedia will fail with an error \"invalid constraints\" in this case.\n        video.frameRate && delete video.frameRate.min;\n\n        if (browser.isChromiumBased()) {\n            // Allow users to seamlessly switch which tab they are sharing without having to select the tab again.\n            browser.isVersionGreaterThan(106) && (video.surfaceSwitching = 'include');\n\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311 for low fps screenshare. Capturing SS at\n            // very high resolutions restricts the framerate. Therefore, skip this hack when capture fps > 5 fps.\n            if (desktopSharingFrameRate?.max <= SS_DEFAULT_FRAME_RATE) {\n                video.height = 99999;\n                video.width = 99999;\n            }\n        }\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        } else {\n            logger.error(`No matching RTP payload type found for ${codecName}, failed to set preferred codecs`);\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport clonedeep from 'lodash.clonedeep';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\n * added after a reneogtiation cycle.\n *\n * @param {MediaType} mediaType media type of the new source that is being added.\n */\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\n    const mid = this.media.length;\n    const sdp = transform.parse(this.raw);\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\n\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n    mline.mid = mid;\n    mline.direction = MediaDirection.RECVONLY;\n\n    // Remove the ssrcs and source groups.\n    mline.msid = undefined;\n    mline.ssrcs = undefined;\n    mline.ssrcGroups = undefined;\n\n    sdp.media = sdp.media.concat(mline);\n\n    // We regenerate the BUNDLE group (since we added a new m-line)\n    sdp.groups.forEach(group => {\n        if (group.type === 'BUNDLE') {\n            const mids = group.mids.split(' ');\n\n            mids.push(mid);\n            group.mids = mids.join(' ');\n        }\n    });\n    this.raw = transform.write(sdp);\n};\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                    const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: sourceName,\n                        videoType,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=extmap-allow-mixed', this.session)) {\n                elem.c('extmap-allow-mixed', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0'\n                });\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpport\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpport) {\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs, /* SCTP port */\n            protocol: 'webrtc-datachannel' /* protocol */\n        });\n\n        // The parser currently requires streams to be present\n        elem.attrs({ streams: 0 });\n        elem.up();\n    } else if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        } else {\n            elem.attrs({ streams: 0 });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '9';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n    } else {\n        media.proto = 'UDP/TLS/RTP/SAVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n        sdp += 'a=max-message-size:262144\\r\\n';\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join(';');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n    if (desc.find('>extmap-allow-mixed[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]').length > 0) {\n        sdp += 'a=extmap-allow-mixed\\r\\n';\n    }\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    let userSources = '';\n    let nonUserSources = '';\n\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n            let isUserSource = true;\n            let sourceStr = '';\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                    if (value && value.length) {\n                        sourceStr += `:${value}`;\n                    }\n\n                    sourceStr += '\\r\\n';\n\n                    if (value?.includes('mixedmslabel')) {\n                        isUserSource = false;\n                    }\n                });\n\n            if (isUserSource) {\n                userSources += sourceStr;\n            } else {\n                nonUserSources += sourceStr;\n            }\n        });\n\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\n    // to sendrecv.\n    sdp += nonUserSources + userSources;\n\n    return sdp;\n};\n","\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n            const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: sourceName,\n                videoType,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * //Using Callbacks\n * async.auto({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     if (err) {\n *         console.log('err = ', err);\n *     }\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * });\n *\n * //Using Promises\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         // once the file is written let's email a link to it...\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }).then(results => {\n *     console.log('results = ', results);\n *     // results = {\n *     //     get_data: ['data', 'converted to array']\n *     //     make_folder; 'folder',\n *     //     write_file: 'filename'\n *     //     email_link: { file: 'filename', email: 'user@example.com' }\n *     // }\n * }).catch(err => {\n *     console.log('err = ', err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.auto({\n *             get_data: function(callback) {\n *                 // async code to get some data\n *                 callback(null, 'data', 'converted to array');\n *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n *                 // once there is some data and the directory exists,\n *                 // write the data to a file in the directory\n *                 callback(null, 'filename');\n *             }],\n *             email_link: ['write_file', function(results, callback) {\n *                 // once the file is written let's email a link to it...\n *                 callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *             }]\n *         });\n *         console.log('results = ', results);\n *         // results = {\n *         //     get_data: ['data', 'converted to array']\n *         //     make_folder; 'folder',\n *         //     write_file: 'filename'\n *         //     email_link: { file: 'filename', email: 'user@example.com' }\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\n\nfunction stripComments(string) {\n    let stripped = '';\n    let index = 0;\n    let endBlockComment = string.indexOf('*/');\n    while (index < string.length) {\n        if (string[index] === '/' && string[index+1] === '/') {\n            // inline comment\n            let endIndex = string.indexOf('\\n', index);\n            index = (endIndex === -1) ? string.length : endIndex;\n        } else if ((endBlockComment !== -1) && (string[index] === '/') && (string[index+1] === '*')) {\n            // block comment\n            let endIndex = string.indexOf('*/', index);\n            if (endIndex !== -1) {\n                index = endIndex + 2;\n                endBlockComment = string.indexOf('*/', index);\n            } else {\n                stripped += string[index];\n                index++;\n            }\n        } else {\n            stripped += string[index];\n            index++;\n        }\n    }\n    return stripped;\n}\n\nfunction parseParams(func) {\n    const src = stripComments(func.toString());\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file3.txt', 'file4.txt'];\n *\n * // asynchronous function that computes the file size in bytes\n * // file size is added to the memoized value, then returned\n * function getFileSizeInBytes(memo, file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, memo + stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.reduce(fileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.reduce(fileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // 6000\n *     // which is the sum of the file sizes of the three files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.reduce(withMissingFileList, 0, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.reduce(fileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *         // 6000\n *         // which is the sum of the file sizes of the three files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.reduce(withMissingFileList, 0, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // dir1/file1.txt\n *        // result now equals the first file in the list that exists\n *    }\n *);\n *\n * // Using Promises\n * async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists)\n * .then(result => {\n *     console.log(result);\n *     // dir1/file1.txt\n *     // result now equals the first file in the list that exists\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.detect(['file3.txt','file2.txt','dir1/file1.txt'], fileExists);\n *         console.log(result);\n *         // dir1/file1.txt\n *         // result now equals the file in the list that exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        /* istanbul ignore else */\n        if (typeof console === 'object') {\n            /* istanbul ignore else */\n            if (err) {\n                /* istanbul ignore else */\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) { /* istanbul ignore else */\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file5.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.every(fileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * });\n *\n * async.every(withMissingFileList, fileExists, function(err, result) {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * });\n *\n * // Using Promises\n * async.every(fileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.every(withMissingFileList, fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since NOT every file exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.every(fileList, fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.every(withMissingFileList, fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since NOT every file exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const files = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.filter(files, fileExists, function(err, results) {\n *    if(err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *        // results is now an array of the existing files\n *    }\n * });\n *\n * // Using Promises\n * async.filter(files, fileExists)\n * .then(results => {\n *     console.log(results);\n *     // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *     // results is now an array of the existing files\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.filter(files, fileExists);\n *         console.log(results);\n *         // [ 'dir1/file1.txt', 'dir2/file3.txt' ]\n *         // results is now an array of the existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const files = ['dir1/file1.txt','dir2','dir4']\n *\n * // asynchronous function that detects file type as none, file, or directory\n * function detectFile(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(null, 'none');\n *         }\n *         callback(null, stat.isDirectory() ? 'directory' : 'file');\n *     });\n * }\n *\n * //Using callbacks\n * async.groupBy(files, detectFile, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *\t       console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n * });\n *\n * // Using Promises\n * async.groupBy(files, detectFile)\n * .then( result => {\n *     console.log(result);\n *     // {\n *     //     file: [ 'dir1/file1.txt' ],\n *     //     none: [ 'dir4' ],\n *     //     directory: [ 'dir2']\n *     // }\n *     // result is object containing the files grouped by type\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.groupBy(files, detectFile);\n *         console.log(result);\n *         // {\n *         //     file: [ 'dir1/file1.txt' ],\n *         //     none: [ 'dir4' ],\n *         //     directory: [ 'dir2']\n *         // }\n *         // result is object containing the files grouped by type\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whose\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file3.txt'\n * };\n *\n * const withMissingFileMap = {\n *     f1: 'file1.txt',\n *     f2: 'file2.txt',\n *     f3: 'file4.txt'\n * };\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, key, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.mapValues(fileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n * });\n *\n * // Error handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes, function(err, result) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(result);\n *     }\n * });\n *\n * // Using Promises\n * async.mapValues(fileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n *     // result is now a map of file size in bytes for each file, e.g.\n *     // {\n *     //     f1: 1000,\n *     //     f2: 2000,\n *     //     f3: 3000\n *     // }\n * }).catch (err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.mapValues(withMissingFileMap, getFileSizeInBytes)\n * .then( result => {\n *     console.log(result);\n * }).catch (err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.mapValues(fileMap, getFileSizeInBytes);\n *         console.log(result);\n *         // result is now a map of file size in bytes for each file, e.g.\n *         // {\n *         //     f1: 1000,\n *         //     f2: 2000,\n *         //     f3: 3000\n *         // }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let result = await async.mapValues(withMissingFileMap, getFileSizeInBytes);\n *         console.log(result);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/* istanbul ignore file */\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n *\n * //Using Callbacks\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two'] even though\n *     // the second function had a shorter timeout.\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.parallel([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two'] even though\n *         // the second function had a shorter timeout.\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n    var processingScheduled = false;\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee completes with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n *\n * const fileList = ['dir1/file1.txt','dir2/file3.txt','dir3/file6.txt'];\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.reject(fileList, fileExists, function(err, results) {\n *    // [ 'dir3/file6.txt' ]\n *    // results now equals an array of the non-existing files\n * });\n *\n * // Using Promises\n * async.reject(fileList, fileExists)\n * .then( results => {\n *     console.log(results);\n *     // [ 'dir3/file6.txt' ]\n *     // results now equals an array of the non-existing files\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.reject(fileList, fileExists);\n *         console.log(results);\n *         // [ 'dir3/file6.txt' ]\n *         // results now equals an array of the non-existing files\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * // asynchronous function that checks if a file exists\n * function fileExists(file, callback) {\n *    fs.access(file, fs.constants.F_OK, (err) => {\n *        callback(null, !err);\n *    });\n * }\n *\n * // Using callbacks\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // true\n *        // result is true since some file in the list exists\n *    }\n *);\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists,\n *    function(err, result) {\n *        console.log(result);\n *        // false\n *        // result is false since none of the files exists\n *    }\n *);\n *\n * // Using Promises\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // true\n *     // result is true since some file in the list exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists)\n * .then( result => {\n *     console.log(result);\n *     // false\n *     // result is false since none of the files exists\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir3/file5.txt'], fileExists);\n *         console.log(result);\n *         // true\n *         // result is true since some file in the list exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * async () => {\n *     try {\n *         let result = await async.some(['dir1/missing.txt','dir2/missing.txt','dir4/missing.txt'], fileExists);\n *         console.log(result);\n *         // false\n *         // result is false since none of the files exists\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * // bigfile.txt is a file that is 251100 bytes in size\n * // mediumfile.txt is a file that is 11000 bytes in size\n * // smallfile.txt is a file that is 121 bytes in size\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) return callback(getFileSizeErr);\n *         callback(null, fileSize);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *         }\n *     }\n * );\n *\n * // descending order\n * async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], function(file, callback) {\n *     getFileSizeInBytes(file, function(getFileSizeErr, fileSize) {\n *         if (getFileSizeErr) {\n *             return callback(getFileSizeErr);\n *         }\n *         callback(null, fileSize * -1);\n *     });\n * }, function(err, results) {\n *         if (err) {\n *             console.log(err);\n *         } else {\n *             console.log(results);\n *             // results is now the original array of files sorted by\n *             // file size (ascending by default), e.g.\n *             // [ 'bigfile.txt', 'mediumfile.txt', 'smallfile.txt']\n *         }\n *     }\n * );\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes,\n *     function(err, results) {\n *         if (err) {\n *             console.log(err);\n *             // [ Error: ENOENT: no such file or directory ]\n *         } else {\n *             console.log(results);\n *         }\n *     }\n * );\n *\n * // Using Promises\n * async.sortBy(['mediumfile.txt','smallfile.txt','bigfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now the original array of files sorted by\n *     // file size (ascending by default), e.g.\n *     // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error handling\n * async.sortBy(['mediumfile.txt','smallfile.txt','missingfile.txt'], getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let results = await async.sortBy(['bigfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *         // results is now the original array of files sorted by\n *         // file size (ascending by default), e.g.\n *         // [ 'smallfile.txt', 'mediumfile.txt', 'bigfile.txt']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * // Error handling\n * async () => {\n *     try {\n *         let results = await async.sortBy(['missingfile.txt','mediumfile.txt','smallfile.txt'], getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","import { getLogger } from '@jitsi/logger';\nimport { queue } from 'async';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","export enum JingleSessionState {\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending',\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended'\n};\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED'\n};\n\nexport default MediaSessionEvents;","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: ssrc_,\n        name: s.source\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (!browser.isChromiumBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 scalability is not supported on jvb, so simulcast needs to be disabled when H264 is preferred.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast || options.videoQuality?.preferredCodec === CodecMimeType.H264;\n\n            // Do not send lower spatial layers for low fps screenshare and enable them only for high fps screenshare.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            if (this.isP2P) {\n                this.sendIceCandidate(candidate);\n            }\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator\n                            && (browser.isChromiumBased() || browser.isReactNative())))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan\n                && !this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureSenderVideoEncodings())\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                        })\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Remote preference for receive video max frame heights when source-name signaling is enabled.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (ssrcElement.hasAttribute('name')) {\n                const sourceName = ssrcElement.getAttribute('name');\n\n                this._signalingLayer.setTrackSourceName(ssrc, sourceName);\n            }\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner?.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(() => {\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length) {\n                        this.addTracks(videoTracks);\n                    }\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n\n        const workFunction = finishedCallback => {\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'answer',\n                sdp: newRemoteSdp.raw\n            });\n\n            this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendContentModify();\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setAnswer task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setAnswer task failed: ${error}`);\n                } else {\n                    logger.debug(`${this} setAnswer task done`);\n                }\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n            let tracks = localTracks;\n\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n            // renegotiation.\n            if (FeatureFlags.isMultiStreamSendSupportEnabled() && videoTracks.length > 1) {\n                tracks = [ ...audioTracks, videoTracks[0] ];\n            }\n            for (const track of tracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession = $(jingleOfferAnswerIq)\n                .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            Promise.all(addTracks)\n                .then(() => this._responderRenegotiate(remoteDescription))\n                .then(() => {\n                    this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                        // adjust the video media direction only in the local SDP and the Jingle contents direction\n                        // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                        // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                        // interested in receiving video content. Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this._sourceReceiverConstraints)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer for the first time, but not when offer\n                    // and it's fine since we're generating an answer now it will contain all our SSRCs.\n                    if (oldLocalSdp) {\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setVideoCodecs: preferred=${preferred}, disabled=${disabled}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const senders = this._localVideoActive ? 'both' : 'none';\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote p2p peer.\n     *\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     */\n    setReceiverVideoConstraint(sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - constraints: ${JSON.stringify(sourceReceiverConstraints)}`);\n        this._sourceReceiverConstraints = sourceReceiverConstraints;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            let midFound = false;\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n                midFound = true;\n            });\n\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\n            // in the current remote description. Add a new m-line for this newly signaled source.\n            if (!midFound && this.isP2P) {\n                addSsrcInfo[name] = lines;\n            }\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Processes the source map message received from the bridge and creates a new remote track for newly signaled\n     * SSRCs or updates the source-name and owner on the remote track for an existing SSRC.\n     *\n     * @param {Object} message - The source map message.\n     * @param {string} mediaType - The media type, 'audio' or 'video'.\n     * @returns {void}\n     */\n    processSourceMap(message, mediaType) {\n        const newSources = [];\n\n        for (const src of message.mappedSources) {\n            if (this.peerconnection.addRemoteSsrc(src.ssrc)) {\n                newSources.push(src);\n            } else {\n                const { owner, source, ssrc, videoType } = src;\n                const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n                if (track) {\n                    logger.debug(`Existing SSRC ${ssrc}: new owner=${owner}, source-name=${source}`);\n\n                    // Update the SSRC owner.\n                    this._signalingLayer.setSSRCOwner(ssrc, owner);\n\n                    // Update the track with all the relevant info.\n                    track.setSourceName(source);\n                    track.setOwner(owner);\n                    if (mediaType === MediaType.VIDEO) {\n                        const type = videoType === 'CAMERA' ? VideoType.CAMERA : VideoType.DESKTOP;\n\n                        track._setVideoType(type);\n                    }\n                } else {\n                    logger.error(`Remote track attached to a remote SSRC=${ssrc} not found`);\n                }\n            }\n        }\n\n        // Add the new SSRCs to the remote description by generating a source message.\n        if (newSources.length) {\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: mediaType\n            }).c('description', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: mediaType\n            });\n\n            for (const src of newSources) {\n                const { rtx, ssrc } = src;\n                let msid;\n\n                if (mediaType === MediaType.VIDEO) {\n                    const idx = ++this.numRemoteVideoSources;\n\n                    msid = `remote-video-${idx} remote-video-${idx}`;\n\n                    if (rtx !== '-1') {\n                        _addSourceElement(node, src, rtx, msid);\n                        node.c('ssrc-group', {\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                            semantics: 'FID'\n                        })\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc\n                            })\n                            .up()\n                            .c('source', {\n                                xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n                                ssrc: rtx\n                            })\n                            .up()\n                            .up();\n                    }\n                } else {\n                    const idx = ++this.numRemoteAudioSources;\n\n                    msid = `remote-audio-${idx} remote-audio-${idx}`;\n                }\n                _addSourceElement(node, src, ssrc, msid);\n            }\n            node = node.up();\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n\n            // Always initiate a sRD->cA->sLD cycle when a remote source is added or removed irrespective of whether\n            // the local endpoint is an initiator or responder. Fixes bugs on Chromium where decoders are not created\n            // when sLD->cO->sRD cycle is initiated for p2p cases when remote sources are received.\n            this._responderRenegotiate(remoteDescription).then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n        let ssrcs;\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            ssrcs = lines.map(line => Number(line.split('a=ssrc:')[1]?.split(' ')[0]));\n\n            if (this.usesUnifiedPlan) {\n                let mid;\n\n                lines.forEach(line => {\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n                        } else {\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\n                // additional video sources are added to the peerconnection.\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\n\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n\n        // Update the ssrc owners list.\n        ssrcs?.length && this._signalingLayer.removeSSRCOwners(ssrcs);\n\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\n        // the remote p2p peer when multi-stream support is enabled.\n        if (addSsrcInfo.length > remoteSdp.media.length\n            && this.isP2P\n            && this.usesUnifiedPlan) {\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\n            remoteSdp = new SDP(remoteSdp.raw);\n        }\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()\n            || !localTracks?.length\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewLocalSource(track.getType());\n                }\n            }\n\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: remoteSdp.raw\n            });\n\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\n            this._responderRenegotiate(remoteDescription)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => {\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                    // Signal the new sources to the peer.\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\n                    finishedCallback();\n                })\n                .catch(error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                        const remoteDescription = new RTCSessionDescription({\n                            type: 'offer',\n                            sdp: remoteSdp\n                        });\n\n                        // Always initiate a sRD->cA->sLD cycle since renegotiation fails in the following scenario.\n                        // In a p2p call when channelLastN=0, the direction on the video tranceiver is set to\n                        // 'inactive'. At this point, if the user unmutes, the track is replaced on the video sender.\n                        // If a cO->sLD->sRD is triggered, the browser adds a third m-line which isn't expected and\n                        // possibly is a bug. All renegotiations fail as a result. However, the browser does not add a\n                        // third m-line in the answer it generates and renegotiation succeeds.\n                        promise = this._responderRenegotiate(remoteDescription).then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (oldTrack\n                            && newTrack\n                            && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n\n                        if (newTrack?.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // Configure the video encodings after the track is replaced.\n                            return this.peerconnection.configureSenderVideoEncodings(newTrack);\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureSenderVideoEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not enough to fail the whole\n                                // operation. It will log an error inside for plan-b.\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\n                                const newLocalSdp = tpc.localDescription.sdp;\n\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. It checks if the sourceMaxFrameHeight (as requested by\n     * the p2p peer) or the senders attribute of the video content has changed and modifies the local video sources\n     * accordingly.\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded() && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust the media direction.\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mid;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        return integerHash(this.initiatorJid) % 2 === 0;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            logger.debug(`Received ${action} from ${fromJid}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        logger.debug('Source-name signaling is enabled');\n        this.caps.addFeature('http://jitsi.org/source-name');\n\n        logger.debug('Receiving multiple video streams is enabled');\n        this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n\n        // Advertise support for ssrc-rewriting.\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting-1');\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n                this._components.push(this.conferenceDurationComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face landmarks to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceLandmarksEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceLandmarks', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            faceExpression: payload.faceExpression,\n            timestamp: payload.timestamp,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        this.sendDeploymentInfo = false;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.moderator.allocateConferenceFocus();\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n        this.enforcePreferredCodec = options.enforcePreferredCodec;\n\n        // VP8 cannot be disabled since it the default codec.\n        this.p2pDisabledCodec = options.p2pDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.p2pDisabledCodec)\n            && options.p2pDisabledCodec;\n        this.jvbDisabledCodec = options.jvbDisabledCodec !== CodecMimeType.VP8\n            && this._isCodecSupported(options.jvbDisabledCodec)\n            && options.jvbDisabledCodec;\n\n        // Determine the preferred codecs.\n        this.p2pPreferredCodec = this._isCodecSupported(options.p2pPreferredCodec)\n            && options.p2pPreferredCodec !== options.p2pDisabledCodec\n            ? options.p2pPreferredCodec\n            : CodecMimeType.VP8;\n        this.jvbPreferredCodec = this._isCodecSupported(options.jvbPreferredCodec)\n            && options.jvbPreferredCodec !== options.jvbDisabledCodec\n            ? options.jvbPreferredCodec\n            : CodecMimeType.VP8;\n\n        logger.debug(`Codec preferences for the conference are JVB: preferred=${this.jvbPreferredCodec},`\n            + `disabled=${this.jvbDisabledCodec} P2P: preferred=${this.p2pPreferredCodec},`\n            + `disabled=${this.p2pDisabledCodec}`);\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._selectPreferredCodec(session));\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        if (!preferredCodec) {\n            return false;\n        }\n\n        if (preferredCodec === CodecMimeType.VP9 && !this.enforcePreferredCodec && !browser.supportsVP9()) {\n            return false;\n        }\n\n        // Skip the check on FF because it does not support the getCapabilities API.\n        // It is safe to assume that Firefox supports all the codecs supported by Chrome.\n        if (browser.isFirefox()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred/disabled codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     */\n    _selectPreferredCodec(mediaSession) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n\n        if (!session) {\n            return;\n        }\n        const preferredCodec = session.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = session.isP2P ? this.p2pDisabledCodec : this.jvbDisabledCodec;\n        const currentCodec = session?.peerconnection.getConfiguredVideoCodec();\n        let selectedCodec = preferredCodec ?? currentCodec;\n\n        if (!this.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n            const remoteCodecs = remoteParticipants?.map(remote => {\n                const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n                return peerMediaInfo?.codecType;\n            });\n\n            const nonPreferredCodecs = remoteCodecs.filter(codec => codec !== selectedCodec && codec !== disabledCodec);\n\n            // Find the fallback codec when there are endpoints in the call that don't have the same preferred codec\n            // set.\n            if (nonPreferredCodecs.length) {\n                // Always prefer VP8 as that is the default codec supported on all client types.\n                selectedCodec = nonPreferredCodecs.find(codec => codec === CodecMimeType.VP8)\n                    ?? nonPreferredCodecs.find(codec => this._isCodecSupported(codec));\n            }\n        }\n        if (selectedCodec !== currentCodec || disabledCodec) {\n            session.setVideoCodecs(selectedCodec, disabledCodec);\n        }\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // Whether the channel is connected or not. It will start as undefined\n        // for the first connection attempt. Then transition to either true or false.\n        this._connected = undefined;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            const isConnecting = this._channel && (this._channel.readyState === 'connecting'\n                    || this._channel.readyState === WebSocket.CONNECTING);\n\n            // Should not spawn new websockets while one is already trying to connect.\n            if (isConnecting) {\n                // Timeout is still required as there is flag `_areRetriesEnabled` that\n                // blocks new retrying cycles until any channel opens in current cycle.\n                this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n\n                return;\n            }\n\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'SourceVideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName, videoType) {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            this._connected = true;\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'ForwardedSources': {\n                const forwardedSources = obj.forwardedSources;\n\n                logger.info(`New forwarded sources: ${forwardedSources}`);\n                emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (typeof obj.sourceName === 'string' && typeof obj.maxHeight === 'number') {\n                    logger.info(`SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, obj);\n                } else {\n                    logger.error(`Invalid SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.debug(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (channel !== this._channel) {\n                logger.debug('Skip close handler, channel instance is not equal to stored one');\n\n                return;\n            }\n\n            // When the JVB closes the connection gracefully due to the participant being alone in\n            // the meeting it uses code 1001, so treat that as a graceful close and don't say\n            // anything.\n            const isGracefulClose = this._closedFromClient || event.code === 1001;\n\n            if (!isGracefulClose) {\n                const { code, reason } = event;\n\n                logger.error(`Channel closed: ${code} ${reason}`);\n\n                if (this._mode === 'websocket') {\n                    this._retryWebSocketConnection(event);\n                }\n\n                // We only want to send this event the first time the failure happens.\n                if (this._connected !== false) {\n                    emitter.emit(RTCEvents.DATA_CHANNEL_CLOSED, {\n                        code,\n                        reason\n                    });\n                }\n            }\n\n            this._connected = false;\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport clonedeep from 'lodash.clonedeep';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (!browser.isReactNative()) {\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n        }\n\n        this.pcConstraints = {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({ desktopSharingSources });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the source name of the track.\n     * @returns {String|undefined}\n     */\n    getSourceName() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n\n    /**\n     * Assigns the source name to a track.\n     * @param {String} name - The name to be assigned to the track.\n     * @returns {void}\n     */\n    setSourceName(name) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {number} trackInfo.resolution - The the video resolution if it's a video track\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing source. NOTE: defined for desktop sharing\n     * tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled())) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In React Native we mute the camera by setting track.enabled but that doesn't\n        // work for screen-share tracks, so do the remove-as-mute for those.\n        const doesVideoMuteByStreamRemove\n            = browser.isReactNative() ? this.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack()\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSendSupportEnabled())\n                || !doesVideoMuteByStreamRemove) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                const streamInfo = streamsInfo.find(info => info.track.kind === this.getType());\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                const bLine = clonedeep(mLine);\n\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    // Copy the msid attribute to each ssrc.\n                    bLine.sources.forEach(ssrc => {\n                        ssrc.msid = mLine.msid;\n                    });\n                    media[type].sources = (media[type].sources || []).concat(bLine.sources);\n                }\n                if (typeof bLine.ssrcGroups !== 'undefined' && Array.isArray(bLine.ssrcGroups)) {\n                    media[type].ssrcGroups = (media[type].ssrcGroups || []).concat(bLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","export enum SignalingEvents {\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when presence for a source is received.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {string} endpointId - The endpoint id.\n     * @param {boolean} muted - The new muted state.\n     * @param {string} videoType - The video type of the source.\n     */\n    SOURCE_UPDATED = 'signaling.sourceUpdated',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_UPDATED = SignalingEvents.SOURCE_UPDATED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","\nimport Listenable from '../../modules/util/Listenable';\nimport { MediaType } from '../../service/RTC/MediaType';\n\n/**\n * @typedef {string} EndpointId\n */\n/**\n * @typedef {string} SourceName\n */\n/**\n * @typedef {Object} SourceInfo\n *\n * @property {SourceName} sourceName - Name of the media source.\n * @property {boolean} [muted=false] - Tells if the source is muted (paused?).\n * @property {string} [videoType] - Type of the video for video type.\n */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName) {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    for (const type of Object.values(MediaType)) {\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName) {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (Number.isNaN(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {SourceInfo | undefined}\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Removes the association between a given SSRC and its current owner so that it can re-used when the SSRC gets\n     * remapped to another source from a different endpoint.\n     * @param {number} ssrc a list of SSRCs.\n     */\n    removeSSRCOwners(ssrcList) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Saves the source name for a track identified by it's ssrc.\n     * @param {number} ssrc the ssrc of the target track.\n     * @param {SourceName} sourceName the track's source name to save.\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Removes the SSRCs associated with a given endpoint from the SSRC owners.\n     *\n     * @param {string} id endpoint id of the participant leaving the call.\n     * @returns {void}\n     */\n    updateSsrcOwnersOnLeave(id) { // eslint-disable-line no-unused-vars\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n        this.audioSourcesToMsidMap = new Map();\n        this.videoSourcesToMsidMap = new Map();\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\n     * preceding by a dash sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const mediaType = mediaSection.mLine?.type;\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    let streamId = streamAndTrackIDs[0];\n                    const trackId = streamAndTrackIDs[1];\n\n                    // Always overwrite streamId since we want the msid to be in this format even if the browser\n                    // generates one (in p2p mode).\n                    streamId = `${this.localEndpointId}-${mediaType}`;\n\n                    // eslint-disable-next-line max-depth\n                    if (mediaType === MediaType.VIDEO) {\n                        // eslint-disable-next-line max-depth\n                        if (!this.videoSourcesToMsidMap.has(trackId)) {\n                            streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\n                            this.videoSourcesToMsidMap.set(trackId, streamId);\n                        }\n                    } else if (!this.audioSourcesToMsidMap.has(trackId)) {\n                        streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\n                        this.audioSourcesToMsidMap.set(trackId, streamId);\n                    }\n\n                    streamId = mediaType === MediaType.VIDEO\n                        ? this.videoSourcesToMsidMap.get(trackId)\n                        : this.audioSourcesToMsidMap.get(trackId);\n\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\n                } else {\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n\n        const msidLine = mediaSection.mLine?.msid;\n        const trackId = msidLine && msidLine.split(' ')[1];\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n        for (const source of sources) {\n            const msidExists = mediaSection.ssrcs\n                .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n            if (!msidExists && trackId) {\n                const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\n\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'msid',\n                    value: generatedMsid\n                });\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        if (!FeatureFlags.isMultiStreamSendSupportEnabled()) {\n            videoMlines.splice(1);\n        }\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        // Plan-b clients generate new SSRCs and trackIds whenever tracks are removed and added back to the\n        // peerconnection, therefore local track based map for msids needs to be reset after every transformation.\n        if (!this.tpc._usesUnifiedPlan) {\n            this.audioSourcesToMsidMap.clear();\n            this.videoSourcesToMsidMap.clear();\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\n            let trackIndex;\n\n            if (msid) {\n                const streamId = msid.split(' ')[0];\n\n                // Example stream id: d8ff91-video-8-1\n                // In the example above 8 is the track index\n                const trackIndexParts = streamId.split('-');\n\n                trackIndex = trackIndexParts[trackIndexParts.length - 2];\n            }\n\n            const sourceName = getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex);\n\n            if (!nameExists) {\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: sourceName\n                });\n            }\n\n            if (mediaType === MediaType.VIDEO) {\n                const videoType = this.tpc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                    ?.getVideoType();\n\n                if (videoType) {\n                    // Inject videoType as a=ssrc:1234 videoType:desktop.\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'videoType',\n                        value: videoType\n                    });\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups('FID');\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics('FID');\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport {\n    SdpTransformWrap,\n    parsePrimarySSRC,\n    parseSecondarySSRC\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nimport * as transform from 'sdp-transform';\n\nconst DEFAULT_NUM_OF_LAYERS = 3;\n\ninterface Description {\n    type: RTCSdpType;\n    sdp: string;\n}\n\ninterface Options {\n    numOfLayers?: number\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _options: Options;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor(options: Options) {\n        this._options = options;\n        this._ssrcCache = new Map();\n\n        if (!this._options.numOfLayers) {\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n        }\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n     _fillSsrcsFromCache(mLine: transform.MediaDescription) : any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number) : any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n        const addAssociatedAttributes = (mLine: transform.MediaDescription, ssrc: number) => {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: msid\n            });\n        }\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            })\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            addAssociatedAttributes(mLine, simSsrc);\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: 'SIM',\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc() : number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string) : string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription) : Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: Description) : Description {\n        if (!description || !description.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(session)\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiConference from '../../types/hand-crafted/JitsiConference';\nimport JitsiRemoteTrack from '../../types/hand-crafted/modules/RTC/JitsiRemoteTrack';\nimport RTC from '../../types/hand-crafted/modules/RTC/RTC';\nimport { VideoType } from '../../types/hand-crafted/service/RTC/VideoType';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n  }\n\ntype StreamingStatusMap = {\n    // TODO: Replace this hand crafted VideoType when we convert VideoType.js to Typescript.\n    videoType?: VideoType,\n    startedMs?: number,\n    p2p?: boolean,\n    streamingStatus?: string,\n    value?: number\n};\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: JitsiConference;\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: JitsiConference, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number,\n        p2pRtcMuteTimeout: number,\n        rtcMuteTimeout: number\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'track.streaming.status',\n                    track: sourceName,\n                    status: newStatus\n                }));\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set track RTC muted for: ${sourceName} after the timeout of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector on track signalling mute changed: ${sourceName}`, track.isMuted());\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track created: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this._disposeTrackStreamingStatus();\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     */\n    setOwner(owner) {\n        this.ownerEndpointId = owner;\n        this.emit(JitsiTrackEvents.TRACK_OWNER_CHANGED, owner);\n    }\n\n    /**\n     * Sets the name of the source associated with the remtoe track.\n     *\n     * @param {string} name - The source name to be associated with the track.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nconst logger = getLogger(__filename);\nconst DESKTOP_SHARE_RATE = 500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const HD_BITRATE = 2500000;\nexport const HD_SCALE_FACTOR = 1;\nexport const LD_SCALE_FACTOR = 4;\nexport const SD_SCALE_FACTOR = 2;\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n        const bitrateSettings = this.pc.options?.videoQuality?.maxBitratesVideo;\n        const standardBitrates = {\n            low: LD_BITRATE,\n            standard: SD_BITRATE,\n            high: HD_BITRATE,\n            ssHigh: HD_BITRATE\n        };\n\n        // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n        // Right now only VP8 bitrates are configured on the simulcast encodings, VP9 bitrates have to be\n        // configured on the SDP using b:AS line.\n        this.videoBitrates = bitrateSettings ?? standardBitrates;\n        this.encodingBitrates = this.videoBitrates.VP8 ?? this.videoBitrates;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this._getVideoStreamEncodings(localTrack.getVideoType());\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * The startup configuration for the stream encodings that are applicable to\n     * the video stream when a new sender is created on the peerconnection. The initial\n     * config takes into account the differences in browser's simulcast implementation.\n     *\n     * Encoding parameters:\n     * active - determine the on/off state of a particular encoding.\n     * maxBitrate - max. bitrate value to be applied to that particular encoding\n     *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n     * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n     * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n     *  original resolution of the captured video.\n     *\n     *  @param {VideoType} videoType\n     */\n    _getVideoStreamEncodings(videoType) {\n        const maxVideoBitrate = videoType === VideoType.DESKTOP && this.encodingBitrates.ssHigh\n            ? this.encodingBitrates.ssHigh : this.encodingBitrates.high;\n\n        return [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? maxVideoBitrate : this.encodingBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? HD_SCALE_FACTOR : LD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: this.encodingBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: SD_SCALE_FACTOR\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.encodingBitrates.low : maxVideoBitrate,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? LD_SCALE_FACTOR : HD_SCALE_FACTOR\n            }\n        ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    findTransceiver(mediaType, localTrack = null) {\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n\n        return transceiver;\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            const streams = [];\n\n            if (localTrack.getOriginalStream()) {\n                streams.push(localTrack.getOriginalStream());\n            }\n\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams,\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, newHeight) {\n        const localTrack = localVideoTrack.getTrack();\n        const { height } = localTrack.getSettings();\n        const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n        const encodingsState = videoStreamEncodings\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\n\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n                ? newHeight > 0 && videoStreamEncodings[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\n                    ? true\n                    : frameHeight <= newHeight\n\n                // Keep all the encodings for desktop track active.\n                : true;\n\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\n            // send the desktop stream at all if only the high resolution stream is enabled.\n            if (localVideoTrack.getVideoType() === VideoType.DESKTOP\n                && this.pc._capScreenshareBitrate\n                && this.pc.usesUnifiedPlan()\n                && !browser.isWebKitBased()\n                && videoStreamEncodings[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\n                active = false;\n            }\n\n            return active;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack) {\n        const videoType = localVideoTrack.getVideoType();\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\n        const lowFpsScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n        const encodingsBitrates = this._getVideoStreamEncodings(localVideoTrack.getVideoType())\n        .map(encoding => {\n            const bitrate = lowFpsScreenshare\n                ? desktopShareBitrate\n\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\n                // desktop stream.\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !this.pc.usesUnifiedPlan()\n                    ? undefined\n                    : encoding.maxBitrate;\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     *\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<RTCRtpTransceiver>} - resolved with the associated transceiver when done, rejected otherwise.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n        const localTracks = this.pc.getLocalTracks(mediaType);\n        const track = newTrack?.getTrack() ?? null;\n        const isNewLocalSource = FeatureFlags.isMultiStreamSendSupportEnabled()\n            && localTracks?.length\n            && !oldTrack\n            && newTrack\n            && !localTracks.find(t => t === newTrack);\n        let transceiver;\n\n        // If old track exists, replace the track on the corresponding sender.\n        if (oldTrack && !oldTrack.isMuted()) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\n        // recvonly.\n        } else if (isNewLocalSource) {\n            transceiver = this.pc.peerconnection.getTransceivers().find(\n                t => t.receiver.track.kind === mediaType\n                && t.direction === MediaDirection.RECVONLY\n\n                // Re-use any existing recvonly transceiver (if available) for p2p case.\n                && ((this.pc.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                    || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\n        } else {\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n            const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n            if (sourceName) {\n                const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n                if (this.pc.isP2P) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n                } else if (oldTrack) {\n                    const transceiverMid = this.pc._localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                    transceiver = this.pc.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n                } else if (trackIndex) {\n                    transceiver = this.pc.peerconnection.getTransceivers()\n                            .filter(t => t.receiver.track.kind === mediaType\n                                && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n                }\n            }\n        }\n        if (!transceiver) {\n            return Promise.reject(\n                new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n        }\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n        return transceiver.sender.replaceTrack(track)\n            .then(() => Promise.resolve(transceiver));\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this.findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach(transceiver => {\n            if (active) {\n                const localTrackMids = Array.from(this.pc._localTrackTransceiverMids);\n\n                if (localTrackMids.find(mids => mids[1] === transceiver.mid)) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(localVideoTrack, parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack.getVideoType());\n\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = videoStreamEncodings[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport {\n    HD_BITRATE,\n    HD_SCALE_FACTOR,\n    SIM_LAYER_RIDS,\n    TPCUtils\n} from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if low fps screenshare is desired.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    // We currently need these flags only for FF and that's why we are updating them only for unified plan.\n    if (this._usesUnifiedPlan) {\n        /**\n         * Indicates whether an audio track has ever been added to the peer connection.\n         */\n        this._hasHadAudioTrack = false;\n\n        /**\n         * Indicates whether a video track has ever been added to the peer connection.\n         */\n        this._hasHadVideoTrack = false;\n    }\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n\n    if (this._usesUnifiedPlan) {\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length });\n    } else {\n        const Simulcast = require('@jitsi/sdp-simulcast');\n\n        this.simulcast = new Simulcast(\n            {\n                numOfLayers: SIM_LAYER_RIDS.length,\n                explodeRemoteSimulcast: false,\n                usesUnifiedPlan: false\n            });\n    }\n\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender. The default value is 2160 (4K) when layer suspension is\n     * explicitly disabled.\n     */\n    this._senderVideoMaxHeight = 2160;\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this._localTrackTransceiverMids = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the MID of the m-line associated with the local desktop track (if it exists).\n *\n * @returns {Number|null}\n */\nTraceablePeerConnection.prototype._getDesktopTrackMid = function() {\n    const desktopTrack = this.getLocalVideoTracks().find(track => track.getVideoType() === VideoType.DESKTOP);\n\n    if (desktopTrack) {\n        return Number(this._localTrackTransceiverMids.get(desktopTrack.rtcId));\n    }\n\n    return null;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains any local tracks for given\n * <tt>mediaType</tt>.\n *\n * @param {MediaType} mediaType - The media type.\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.tpcUtils.videoBitrates[currentCodec.toUpperCase()] || this.tpcUtils.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = stream.id;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        return;\n    }\n    logger.info(`${this} Received track event for remote stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`MediaType undefined for remote track, stream id: ${streamId}, track creation failed!`));\n\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLine;\n\n    // In unified plan mode, find the matching mline using 'mid' or the 'msid' attr of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver?.mid) {\n            const mid = transceiver.mid;\n\n            mediaLine = remoteSDP.media.find(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLine = remoteSDP.media.find(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid === 'string' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLine = remoteSDP.media.find(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLine) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Matching media line not found in remote SDP for remote stream[id=${streamId},type=${mediaType}],`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLine, 'a=ssrc:');\n\n    ssrcLines = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n                + 'track creation failed!'));\n\n        return;\n    }\n\n    if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n            + 'track creation failed!'));\n\n        return;\n    }\n\n    const sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n\n    // Assume default presence state for remote source. Presence can be received after source signaling. This shouldn't\n    // prevent the endpoint from creating a remote track for the source.\n    let muted = true;\n    let videoType = VideoType.CAMERA;\n\n    if (peerMediaInfo) {\n        muted = peerMediaInfo.muted;\n        videoType = peerMediaInfo.videoType; // can be undefined\n    } else {\n        logger.info(`${this}: no source-info available for ${ownerEndpointId}:${sourceName}, assuming default state`);\n    }\n\n    this._createRemoteTrack(ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n * @param {String} sourceName the track's source name\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted,\n        sourceName) {\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${ssrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n    if (userTracksByMediaType?.size\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    userTracksByMediaType.add(remoteTrack);\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${stream.id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    // Ignore stream removed events for JVB \"mixed\" sources (used for RTCP termination).\n    if (!RTC.isUserStreamById(streamId)) {\n        return;\n    }\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\n\n        return;\n    }\n\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname (resource part of the JID).\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]} - The array of removed tracks.\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    let removedTracks = [];\n    const remoteTracksByMedia = this.remoteTracks.get(owner);\n\n    if (remoteTracksByMedia) {\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.AUDIO)));\n        removedTracks = removedTracks.concat(Array.from(remoteTracksByMedia.get(MediaType.VIDEO)));\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    logger.info(`${this} Removing remote track stream[id=${toBeRemoved.getStreamId()},`\n        + `trackId=${toBeRemoved.getTrackId()}]`);\n\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n    if (!userTracksByMediaType) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unified-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    if (this._usesUnifiedPlan) {\n        media = media.filter(mline => mline.direction === MediaDirection.SENDONLY\n            || mline.direction === MediaDirection.SENDRECV);\n    } else {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    let index = 0;\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined' && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? `${mLine.type}-${index}` : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n\n        // Currently multi-stream is supported for video only.\n        mLine.type === MediaType.VIDEO && index++;\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs but no ssrc-groups on Firefox. Unfortunately, Jicofo\n * will complain if it sees ssrcs with matching msids but no ssrc-group, so a ssrc-group line is injected to make\n * Jicofo happy.\n *\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast = function(desc) {\n    const sdp = transform.parse(desc.sdp);\n    const video = sdp.media.find(mline => mline.type === 'video');\n\n    // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n    video.ssrcGroups = video.ssrcGroups || [];\n    const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n    if (video.simulcast || video.simulcast_03) {\n        const ssrcs = [];\n\n        if (fidGroups && fidGroups.length) {\n            fidGroups.forEach(group => {\n                ssrcs.push(group.ssrcs.split(' ')[0]);\n            });\n        } else {\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n        }\n        if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n            // Group already exists, no need to do anything\n            return desc;\n        }\n\n        // Add a SIM group for every 3 FID groups.\n        for (let i = 0; i < ssrcs.length; i += 3) {\n            const simSsrcs = ssrcs.slice(i, i + 3);\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: simSsrcs.join(' ')\n            });\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(sdp)\n    });\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media.filter(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLines.length) {\n        return description;\n    }\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.disabledCodecMimeType) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.disabledCodecMimeType);\n        }\n\n        if (this.codecPreference.mimeType !== this.codecPreference.disabledCodecMimeType) {\n            SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n            // Strip the high profile H264 codecs on mobile clients for p2p connection. High profile codecs give better\n            // quality at the expense of higher load which we do not want on mobile clients. Jicofo offers only the\n            // baseline code for the jvb connection and therefore this is not needed for jvb connection.\n            // TODO - add check for mobile browsers once js-utils provides that check.\n            if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n                SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n            }\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n    const webrtcStream = track.getOriginalStream();\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.addTrack using unified plan`);\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(null, track).then(() => {\n            if (track) {\n                if (track.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.mimeType = preferredCodec;\n        this.codecPreference.disabledCodecMimeType = disabledCodec;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            mediaType: MediaType.VIDEO,\n            mimeType: preferredCodec,\n            disabledCodecMimeType: disabledCodec\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    if (this.peerconnection.getSenders) {\n        return this.peerconnection.getSenders().find(s => s.track === track);\n    }\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.peerconnection.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this._localTrackTransceiverMids.has(track.rtcId)) {\n                this._localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n *\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n        const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n            .then(transceiver => {\n                if (oldTrack) {\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this._localTrackTransceiverMids.delete(oldTrack.rtcId);\n                }\n\n                if (newTrack) {\n                    if (newTrack.isAudioTrack()) {\n                        this._hasHadAudioTrack = true;\n                    } else {\n                        this._hasHadVideoTrack = true;\n                    }\n                    this._localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n                }\n\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\n                // renegotiation is triggered as a result of this.\n                if (oldTrack && newTrack) {\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                    if (oldTrackSSRC) {\n                        this.localSSRCs.delete(oldTrack.rtcId);\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    }\n                }\n                const mediaActive = mediaType === MediaType.AUDIO\n                    ? this.audioTransferActive\n                    : this.videoTransferActive;\n\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\n                // this connection again.\n                if (transceiver && mediaActive) {\n                    // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n                    // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n                    // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n                    // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n                    // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n                    // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n                    // be reused on a new m-line and if the remote participant is FF due to\n                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n                    // That's why we need keep the direction to SENDRECV for FF.\n                    //\n                    // NOTE: If we return back to the approach of not removing the track for FF and instead using the\n                    // enabled property for mute or stopping screensharing we may need to change the direction to\n                    // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n                    transceiver.direction\n                        = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n                } else if (transceiver) {\n                    transceiver.direction = MediaDirection.INACTIVE;\n                }\n\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                // for the newly added track using SDP munging which happens during the renegotiation.\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\n                    ? Promise.resolve()\n                    : this.tpcUtils.setEncodings(newTrack);\n\n                return configureEncodingsPromise.then(() => this.isP2P);\n            });\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} from PC`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeTrack - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO)?.[0];\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Munges the SDP to set all directions to inactive and drop all ssrc and ssrc-groups.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeInactive = function(description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        mLine.direction = MediaDirection.INACTIVE;\n        mLine.ssrcs = undefined;\n        mLine.ssrcGroups = undefined;\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Sets the max bitrates on the video m-lines when VP9 is the selected codec.\n *\n * @param {RTCSessionDescription} description - The local description that needs to be munged.\n * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n * @returns RTCSessionDescription\n */\nTraceablePeerConnection.prototype._setVp9MaxBitrates = function(description, isLocalSdp = false) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Find all the m-lines associated with the local sources.\n    const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n    const mLines = parsedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction);\n\n    for (const mLine of mLines) {\n        if (this.codecPreference.mimeType === CodecMimeType.VP9) {\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const ssHdBitrate = bitrates.ssHigh ? bitrates.ssHigh : HD_BITRATE;\n            const mid = mLine.mid;\n            const isSharingScreen = FeatureFlags.isMultiStreamSendSupportEnabled()\n                ? mid === this._getDesktopTrackMid()\n                : this._isSharingScreen();\n            const limit = Math.floor((isSharingScreen ? ssHdBitrate : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Configures the stream encodings depending on the video type and the bitrates configured.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\n    if (localVideoTrack) {\n        return this.setSenderVideoConstraints(\n            this._senderMaxHeights.get(localVideoTrack.getSourceName()),\n            localVideoTrack);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalVideoTracks()) {\n        promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\n    }\n\n    return Promise.allSettled(promises);\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localDescription));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localDescription = this._mungeOpus(localDescription);\n\n    if (!this._usesUnifiedPlan) {\n        localDescription = this._adjustLocalMediaDirection(localDescription);\n        localDescription = this._ensureSimulcastGroupIsLast(localDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    localDescription = this._mungeCodecOrder(localDescription);\n    localDescription = this._setVp9MaxBitrates(localDescription, true);\n\n    this.trace('setLocalDescription::postTransform', dumpSDP(localDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    remoteDescription = this._mungeOpus(remoteDescription);\n\n    if (this._usesUnifiedPlan) {\n        // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\n        if (!this.isP2P) {\n            const currentDescription = this.peerconnection.remoteDescription;\n\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\n        }\n        if (this.isSimulcastOn()) {\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n    } else {\n        if (this.isSimulcastOn()) {\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\n            remoteDescription = this.simulcast.mungeRemoteDescription(\n                remoteDescription,\n                true /* add x-google-conference flag */);\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\n        }\n        remoteDescription = normalizePlanB(remoteDescription);\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\n    remoteDescription = this._setVp9MaxBitrates(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED, err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    const sourceName = localVideoTrack.getSourceName();\n\n    if (this._senderMaxHeights.get(sourceName) === frameHeight) {\n        return Promise.resolve();\n    }\n    this._senderMaxHeights.set(sourceName, frameHeight);\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = localVideoTrack.getVideoType() === VideoType.DESKTOP && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\n    const videoType = localVideoTrack.getVideoType();\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n                // encodings.\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\n\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\n                    && (this.options?.videoQuality?.maxBitratesVideo\n                        || isSharingLowFpsScreen\n                        || this._usesUnifiedPlan)) {\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\n                }\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(localVideoTrack, parameters);\n\n    // For p2p and cases and where simulcast is explicitly disabled.\n    } else if (frameHeight > 0) {\n        let scaleFactor = HD_SCALE_FACTOR;\n\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\n        }\n\n        parameters.encodings[0].active = true;\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\n\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\n\n        // Configure the bitrate.\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\n            let bitrate = this.getTargetVideoBitrates()?.high;\n\n            if (videoType === VideoType.CAMERA) {\n                bitrate = this.tpcUtils._getVideoStreamEncodings(localVideoTrack.getVideoType())\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate ?? bitrate;\n            }\n            parameters.encodings[0].maxBitrate = bitrate;\n        }\n    } else {\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTracks of peerTracks.values()) {\n            for (const remoteTrack of remoteTracks) {\n                this._removeRemoteTrack(remoteTrack);\n            }\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTracks()[0];\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan)) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const disabledCodecMimeType = this.codecPreference?.disabledCodecMimeType;\n            const mimeType = this.codecPreference?.mimeType;\n\n            if (capabilities && disabledCodecMimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${disabledCodecMimeType}`);\n            }\n\n            if (capabilities && mimeType && mimeType !== disabledCodecMimeType) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            }\n\n            // Disable ulpfec on Google Chrome and derivatives because\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\n            if (browser.isChromiumBased()) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},disabledCodecMimeType=${\n                    disabledCodecMimeType}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceName = track.getSourceName();\n        const sourceIndex = getSourceIndexFromSourceName(sourceName);\n        const sourceIdentifier = this._usesUnifiedPlan\n            ? `${track.getType()}-${sourceIndex}`\n            : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {number} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add forwarded sources change listener.\n        this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        // TODO: remove this.\n        const supportsSdpSemantics = browser.isChromiumBased() && !options.usesUnifiedPlan;\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO)\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(stream.id);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n};\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high' },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high' },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard' },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard' },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low' },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low' }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n     * for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n};\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n};\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE = 200;\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext() {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop() {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay() {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop() {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request, requestId;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined() {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id) {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","/* global TransformStream */\nimport { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\n// Flag to set on receivers to avoid setting up the lite mode\n// more than once.\nconst kJitsiLiteMode = Symbol('kJitsiLiteMode');\n\nconst logger = getLogger(__filename);\n\n/**\n * This module implements a discard-all insertable stream.  Use to reduce decoder CPU load for testing.\n */\nexport class LiteModeContext {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which lite mode is to be enabled.\n     */\n    constructor(conference) {\n        this.enabled = FeatureFlags.isRunInLiteModeEnabled();\n        if (!this.enabled) {\n            return;\n        }\n\n        conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupLiteModeForTrack(tpc, track));\n    }\n\n    /**\n     * Setup Lite Mode for a track.\n     *\n     * @private\n     */\n    _setupLiteModeForTrack(tpc, track) {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (!receiver) {\n            logger.warn(`Could not set up lite mode for ${track}: receiver not found in: ${tpc}`);\n\n            return;\n        }\n\n        if (receiver[kJitsiLiteMode]) {\n            return;\n        }\n        receiver[kJitsiLiteMode] = true;\n\n        const receiverStreams = receiver.createEncodedStreams();\n\n        const transformStream = new TransformStream({\n            transform: () => {\n                // Don't call controller.enqueue(encodedFrame), and so drop everything\n            }\n        });\n\n        receiverStreams.readable.pipeThrough(transformStream).pipeTo(receiverStreams.writable);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT = 2160;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nclass ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     *\n     * @param {number} lastN - Number of videos to be requested from the bridge.\n     */\n    constructor(lastN) {\n        // The number of videos requested from the bridge.\n        this._lastN = lastN ?? LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge/peer.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: { 'maxHeight': this._maxFrameHeight },\n            lastN: this._lastN\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel or to the remote peer.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n        if (Object.keys(this._receiverVideoConstraints.constraints)?.length) {\n            /* eslint-disable no-unused-vars */\n            for (const [ key, value ] of Object.entries(this._receiverVideoConstraints.constraints)) {\n                value.maxHeight = this._maxFrameHeight;\n            }\n        } else {\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        /**\n         * The map that holds the max frame height requested per remote source for p2p connection.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        // The default receiver video constraints.\n        this._receiverVideoConstraints = new ReceiverVideoConstraints(this._lastN);\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {JingleSessionPC} mediaSession - the media session.\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        const height = maxFrameHeight ?? MAX_HEIGHT;\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), height);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P) {\n            mediaSession.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(mediaSession));\n        } else {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._receiverVideoConstraints.updateLastN(value)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P) {\n                session.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(session, maxFrameHeight));\n            } else if (this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight)) {\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!constraints) {\n            return;\n        }\n        const isEndpointsFormat = Object.keys(constraints).includes('onStageEndpoints', 'selectedEndpoints');\n\n        if (isEndpointsFormat) {\n            throw new Error(\n                '\"onStageEndpoints\" and \"selectedEndpoints\" are not supported when sourceNameSignaling is enabled.'\n            );\n        }\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n\n            // Send the contraints on the bridge channel.\n            this._rtc.setReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession) {\n                return;\n            }\n\n            const mappedConstraints = Array.from(Object.entries(constraints.constraints))\n                .map(constraint => {\n                    constraint[1] = constraint[1].maxHeight;\n\n                    return constraint;\n                });\n\n            this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n            // Send the receiver constraints to the peer through a \"content-modify\" message.\n            p2pSession.setReceiverVideoConstraint(this._sourceReceiverConstraints);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n        this._rtc = rtc;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n\n        this._sourceSenderConstraints = new Map();\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._configureConstraintsForLocalSources());\n        this._rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => this._onSenderConstraintsReceived(videoConstraints));\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _configureConstraintsForLocalSources() {\n        for (const track of this._rtc.getLocalVideoTracks()) {\n            const sourceName = track.getSourceName();\n\n            sourceName && this._propagateSendMaxFrameHeight(sourceName);\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n            (session, sourceConstraints) => {\n                session === this._conference.getActiveMediaSession()\n                    && sourceConstraints.forEach(constraint => this._onSenderConstraintsReceived(constraint));\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _onSenderConstraintsReceived(videoConstraints) {\n        const { maxHeight, sourceName } = videoConstraints;\n        const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n        for (const track of localVideoTracks) {\n            // Propagate the sender constraint only if it has changed.\n            if (track.getSourceName() === sourceName\n                && this._sourceSenderConstraints.get(sourceName) !== maxHeight) {\n                this._sourceSenderConstraints.set(\n                    sourceName,\n                    maxHeight === -1\n                        ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                        : maxHeight);\n                logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                this._propagateSendMaxFrameHeight(sourceName);\n            }\n        }\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? this._sourceSenderConstraints.get(sourceName)\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n        const promises = [];\n\n        for (const sourceName of this._sourceSenderConstraints.keys()) {\n            promises.push(this._propagateSendMaxFrameHeight(sourceName));\n        }\n\n        return Promise.allSettled(promises);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid() {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status) {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid) {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid) {\n        let s;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid) {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiConference} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\n\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face-landmarks';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                (participant, { type, faceLandmarks }) => {\n                    if (type === FACE_LANDMARK_MESSAGE_TYPE) {\n                        this._onFaceLandmarkAdd(participant.getId(), faceLandmarks);\n                    }\n                });\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data) {\n            savedUser.addFaceLandmarks(data);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                if (Array.isArray(newStats[userId].faceLandmarks)) {\n                    speakerStatsToUpdate.setFaceLandmarks(newStats[userId].faceLandmarks);\n                }\n            }\n        }\n    }\n}\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n */\nexport default class RecordingResult {\n    /**\n     * @param blob the recording audio stream as a single blob\n     * @param name the name of the person of the audio stream\n     * @param startTime the time in UTC when recording of the audiostream started\n     * @param wordArray the recorder audio stream transcribed as an array of Word objects\n     */\n    constructor(blob, name, startTime, wordArray) {\n        this.blob = blob;\n        this.name = name;\n        this.startTime = startTime;\n        this.wordArray = wordArray;\n    }\n}\n","/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nexport default class TrackRecorder {\n    /**\n     * @param track The JitsiTrack the object is going to hold\n     */\n    constructor(track) {\n        // The JitsiTrack holding the stream\n        this.track = track;\n\n        // The MediaRecorder recording the stream\n        this.recorder = null;\n\n        // The array of data chunks recorded from the stream\n        // acts as a buffer until the data is stored on disk\n        this.data = null;\n\n        // the name of the person of the JitsiTrack. This can be undefined and/or\n        // not unique\n        this.name = null;\n\n        // the time of the start of the recording\n        this.startTime = null;\n    }\n}\n","import RecordingResult from './recordingResult';\nimport TrackRecorder from './trackRecorder';\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nexport default AudioRecorder;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nexport default class Word {\n    /**\n     * @param word the word\n     * @param begin the time the word was started being uttered\n     * @param end the time the word stopped being uttered\n     */\n    constructor(word, begin, end) {\n        this.word = word;\n        this.begin = begin;\n        this.end = end;\n    }\n\n    /**\n     * Get the string representation of the word\n     * @returns {*} the word as a string\n     */\n    getWord() {\n        return this.word;\n    }\n\n    /**\n     * Get the time the word started being uttered\n     * @returns {*} the start time as an integer\n     */\n    getBeginTime() {\n        return this.begin;\n    }\n\n    /**\n     * Get the time the word stopped being uttered\n     * @returns {*} the end time as an integer\n     */\n    getEndTime() {\n        return this.end;\n    }\n}\n","/* global config */\n\nimport Word from '../word';\n\nimport audioRecorder from './../audioRecorder';\nimport AbstractTranscriptionService from './AbstractTranscriptionService';\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nexport default class SphinxService extends AbstractTranscriptionService {\n    /**\n     * Implements a TranscriptionService for a Sphinx4 http server\n     */\n    constructor() {\n        super();\n\n        // set the correct url\n        this.url = getURL();\n    }\n\n    /**\n     * Overrides the sendRequest method from AbstractTranscriptionService\n     * it will send the audio stream the a Sphinx4 server to get the transcription\n     *\n     * @param audioFileBlob the recorder audio stream an a single Blob\n     * @param callback the callback function retrieving the server response\n     */\n    sendRequest(audioFileBlob, callback) {\n        console.log(`sending an audio file  to ${this.url}`);\n        console.log(`the audio file being sent: ${audioFileBlob}`);\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = function() {\n            if (request.readyState === XMLHttpRequest.DONE\n                && request.status === 200) {\n                callback(request.responseText);\n            } else if (request.readyState === XMLHttpRequest.DONE) {\n                throw new Error(\n                    `unable to accept response from sphinx server. status: ${request.status}`);\n            }\n\n            // if not ready no point to throw an error\n        };\n        request.open('POST', this.url);\n        request.setRequestHeader('Content-Type',\n            audioRecorder.determineCorrectFileType());\n        request.send(audioFileBlob);\n        console.log(`send ${audioFileBlob}`);\n    }\n\n    /**\n     * Overrides the formatResponse method from AbstractTranscriptionService\n     * It will parse the answer from the server in the expected format\n     *\n     * @param response the JSON body retrieved from the Sphinx4 server\n     */\n    formatResponse(response) {\n        const result = JSON.parse(response).objects;\n\n        // make sure to delete the session id object, which is always\n        // the first value in the JSON array\n        result.shift();\n        const array = [];\n\n        result.forEach(\n            word => word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n        return array;\n    }\n\n    /**\n     * checks wether the reply is empty, or doesn't contain a correct JSON object\n     * @param response the server response\n     * @return {boolean} whether the response is valid\n     */\n    verify(response) {\n        console.log(`response from server:${response.toString()}`);\n\n        // test if server responded with a string object\n        if (typeof response !== 'string') {\n            return false;\n        }\n\n        // test if the string can be parsed into valid JSON\n        let json;\n\n        try {\n            json = JSON.parse(response);\n        } catch (error) {\n            console.log(error);\n\n            return false;\n        }\n\n        // check if the JSON has a \"objects\" value\n        if (json.objects === undefined) {\n            return false;\n        }\n\n        // get the \"objects\" value and check for a session ID\n        const array = json.objects;\n\n        if (!(array[0] && array[0]['session-id'])) {\n            return false;\n        }\n\n        // everything seems to be in order\n        return true;\n    }\n}\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nexport default class TranscriptionService {\n    /**\n     * Abstract class representing an interface to implement a speech-to-text\n     * service on.\n     */\n    constructor() {\n        throw new Error('TranscriptionService is abstract and cannot be created');\n    }\n\n    /**\n     * This method can be used to send the recorder audio stream and\n     * retrieve the answer from the transcription service from the callback\n     *\n     * @param {RecordingResult} recordingResult a recordingResult object which\n     * includes the recorded audio stream as a blob\n     * @param {Function} callback  which will retrieve the a RecordingResult with\n     *        the answer as a WordArray\n     */\n    send(recordingResult, callback) {\n        this.sendRequest(recordingResult.blob, response => {\n            if (this.verify(response)) {\n                recordingResult.wordArray = this.formatResponse(response);\n            } else {\n                console.log('the retrieved response from the server is not valid!');\n                recordingResult.wordArray = [];\n            }\n            callback(recordingResult);\n        });\n    }\n\n    /**\n     * Abstract method which will rend the recorder audio stream to the implemented\n     * transcription service and will retrieve an answer, which will be\n     * called on the given callback method\n     *\n     * @param {Blob} audioBlob the recorded audio stream as a single Blob\n     * @param {function} callback function which will retrieve the answer\n     *                            from the service\n     */\n    sendRequest(audioBlob, callback) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.sendRequest is abstract');\n    }\n\n    /**\n     * Abstract method which will parse the output from the implemented\n     * transcription service to the expected format\n     *\n     * The transcriber class expect an array of word objects, where each word\n     * object is one transcribed word by the service.\n     *\n     * The expected output of this method is an array of word objects, in\n     * the correct order. That is, the first object in the array is the first word\n     * being said, and the last word in the array is the last word being said\n     *\n     * @param response the answer from the speech-to-text server which needs to be\n     *                 formatted\n     * @return {Array<Word>} an array of Word objects\n     */\n    formatResponse(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.format is abstract');\n    }\n\n    /**\n     * Abstract method which will verify that the response from the server is valid\n     *\n     * @param response the response from the server\n     * @return {boolean} true if response is valid, false otherwise\n     */\n    verify(response) { // eslint-disable-line no-unused-vars\n        throw new Error('TranscriptionService.verify is abstract');\n    }\n}\n","import AudioRecorder from './audioRecorder';\nimport SphinxService from './transcriptionServices/SphinxTranscriptionService';\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nexport default Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('@jitsi/logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","export enum VideoSIPGWStatusConstants {\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy'\n};\n\nexport enum VideoSIPGWStateConstants {\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying',\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed'\n};\n\nexport enum VideoSIPGWErrorConstants {\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n};\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger(__filename);\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger(__filename);\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n\n        /**\n         * A map that stores the source name of a track identified by it's ssrc.\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to source name\n         */\n        this._sourceNames = new Map();\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        // Add handlers for 'audiomuted', 'videomuted' and 'videoType' fields in presence in order to support interop\n        // with very old versions of mobile clients and jigasi that do not support source-name signaling.\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        // Add handlers for presence in the new format.\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = JSON.parse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                let sourceChanged = false;\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    sourceChanged = true;\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    sourceChanged = true;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n\n                if (sourceChanged && FeatureFlags.isSsrcRewritingSupported()) {\n                    this.eventEmitter.emit(\n                        SignalingEvents.SOURCE_UPDATED,\n                        sourceName,\n                        mucNick,\n                        newMutedState,\n                        newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n\n            for (const [ key, value ] of this.ssrcOwners.entries()) {\n                if (value === endpointId) {\n                    delete this._sourceNames[key];\n                }\n            }\n        };\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Logs a debug or error message to console depending on whether SSRC rewriting is enabled or not.\n     * Owner changes are permitted only when SSRC rewriting is enabled.\n     *\n     * @param {string} message - The message to be logged.\n     * @returns {void}\n     */\n    _logOwnerChangedMessage(message) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(message);\n        } else {\n            logger.error(message);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n        if (!lastPresence) {\n            logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n            return;\n        }\n        if (!this._doesEndpointSendNewSourceInfo(owner)) {\n            return legacyGetPeerMediaInfo();\n        }\n\n        if (sourceName) {\n            return this.getPeerSourceInfo(owner, sourceName);\n        }\n\n        const mediaInfo = {\n            muted: true\n        };\n\n        if (mediaType === MediaType.VIDEO) {\n            mediaInfo.videoType = undefined;\n            const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n            if (codecTypeNode.length > 0) {\n                mediaInfo.codecType = codecTypeNode[0].value;\n            }\n        }\n\n        return mediaInfo;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: VideoType.CAMERA // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this._sourceNames.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            this._sourceInfoHandler\n                && oldChatRoom.removePresenceListener(SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n            this._memberLeftHandler\n                && oldChatRoom.removeEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n        }\n        if (room) {\n            this._bindChatRoomEventHandlers(room);\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            this._logOwnerChangedMessage(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n\n        if (this.chatRoom) {\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingName = this._sourceNames.get(ssrc);\n\n        if (existingName && existingName !== sourceName) {\n            this._logOwnerChangedMessage(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\n        }\n\n        this._sourceNames.set(ssrc, sourceName);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n\n}\n","import { getLogger } from '@jitsi/logger';\nimport EventEmitter from 'events';\nimport $ from 'jquery';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling from './modules/connectivity/IceFailedHandling';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { LiteModeContext } from './modules/litemode/LiteModeContext';\nimport ReceiveVideoController from './modules/qualitycontrol/ReceiveVideoController';\nimport SendVideoController from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { SignalingEvents } from './service/RTC/SignalingEvents';\nimport { getMediaTypeFromSourceName, getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Checks if a given string is a valid video codec mime type.\n *\n * @param {string} codec the codec string that needs to be validated.\n * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n * @private\n */\nfunction _getCodecMimeType(codec) {\n    if (typeof codec === 'string') {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return null;\n}\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n\n    /**\n     * List of all the participants in the conference.\n     * @type {Map<string, JitsiParticipant>};\n     */\n    this.participants = new Map();\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    if (FeatureFlags.isRunInLiteModeEnabled()) {\n        logger.info('Lite mode enabled');\n\n        this._liteModeContext = new LiteModeContext(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    const codecSettings = {\n        jvbDisabledCodec: _getCodecMimeType(config.videoQuality?.disabledCodec),\n        p2pDisabledCodec: _getCodecMimeType(config.p2p?.disabledCodec),\n        enforcePreferredCodec: config.videoQuality?.enforcePreferredCodec,\n        jvbPreferredCodec: _getCodecMimeType(config.videoQuality?.preferredCodec),\n        p2pPreferredCodec: _getCodecMimeType(config.p2p?.preferredCodec)\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n    this._signalingLayer.on(\n        SignalingEvents.SOURCE_UPDATED,\n        (sourceName, endpointId, muted, videoType) => {\n            const participant = this.participants.get(endpointId);\n            const mediaType = getMediaTypeFromSourceName(sourceName);\n\n            if (participant) {\n                participant._setSources(mediaType, muted, sourceName, videoType);\n                this.eventEmitter.emit(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, participant);\n            }\n        });\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        this._registerRtcListeners(this.rtc);\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    localtrack && this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        if (name) {\n            this.room.addOrReplaceInPresence(nickKey, {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: name\n            }) && this.room.sendPresence();\n        } else if (this.room.getFromPresence(nickKey)) {\n            this.room.removeFromPresence(nickKey);\n            this.room.sendPresence();\n        }\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (FeatureFlags.isMultiStreamSendSupportEnabled()\n            && mediaType === MediaType.VIDEO\n            && !localTracks.find(t => t.getVideoType() === track.getVideoType())) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP && FeatureFlags.isMultiStreamSendSupportEnabled()) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation.\n    // In React Native we mute the camera by setting track.enabled but that doesn't\n    // work for screen-share tracks, so do the remove-as-mute for those.\n    const doesVideoMuteByStreamRemove\n        = browser.isReactNative() ? track.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n    if (track.isVideoTrack() && !doesVideoMuteByStreamRemove) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (FeatureFlags.isMultiStreamSendSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (newTrack) {\n        const sourceName = oldTrack\n            ? oldTrack.getSourceName()\n            : getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            if (oldTrackBelongsToConference && !oldTrack.isMuted() && !newTrack) {\n                oldTrack._sendMuteStatus(true);\n            }\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device = devices\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    // Create a source name for this track if it doesn't exist.\n    if (!newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (this.jvbJingleSession) {\n        addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n    } else {\n        logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (this.jvbJingleSession) {\n        removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Array.from(this.participants.values());\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants.get(id);\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    // Set remote tracks on the participant if source signaling was received before presence.\n    const remoteTracks = this.isP2PActive()\n        ? this.p2pJingleSession?.peerconnection.getRemoteTracks(id) ?? []\n        : this.jvbJingleSession?.peerconnection.getRemoteTracks(id) ?? [];\n\n    for (const track of remoteTracks) {\n        participant._tracks.push(track);\n    }\n\n    this.participants.set(id, participant);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    if (!FeatureFlags.isSsrcRewritingSupported()) {\n        const mediaSessions = this.getMediaSessions();\n        let tracksToBeRemoved = [];\n\n        for (const session of mediaSessions) {\n            const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n            remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n            // Update the SSRC owners list.\n            session._signalingLayer.updateSsrcOwnersOnLeave(id);\n\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n\n        // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n        tracksToBeRemoved.forEach(track => {\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n        });\n    }\n\n    const participant = this.participants.get(id);\n\n    if (participant) {\n        this.participants.delete(id);\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants.get(actorId);\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants.get(kickedParticipantId);\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    // Add track to JitsiParticipant.\n    if (participant) {\n        participant._tracks.push(track);\n    } else {\n        logger.info(`Source signaling received before presence for ${id}`);\n    }\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const usesUnifiedPlan = browser.supportsUnifiedPlan()\n        && (!browser.isChromiumBased() || (this.options.config.enableUnifiedOnChrome ?? true));\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (usesUnifiedPlan !== peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || browser.isFirefox()\n        || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n            });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    const ignoreDomain = this.connection?.options?.bridgeChannel?.ignoreDomain;\n    let wsUrl = null;\n\n    $(offerIq).find('>content>transport>web-socket')\n        .toArray()\n        .map(e => e.getAttribute('url'))\n        .forEach(url => {\n            if (!wsUrl && (!ignoreDomain || ignoreDomain !== new URL(url).hostname)) {\n                wsUrl = url;\n                logger.info(`Using colibri-ws url ${url}`);\n            } else if (!wsUrl) {\n                logger.info(`Ignoring colibri-ws url with domain ${ignoreDomain}`);\n            }\n        });\n\n    if (!wsUrl) {\n        const firstWsUrl = $(offerIq).find('>content>transport>web-socket')\n            .first();\n\n        if (firstWsUrl.length === 1) {\n            wsUrl = firstWsUrl[0].getAttribute('url');\n            logger.info(`Falling back to ${wsUrl}`);\n        }\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        logger.info('No colibri-ws found.');\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks\n            // to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    return this.room?.moderator?.isSipGatewayEnabled() ?? false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession({\n            reason: 'decline',\n            reasonDescription: 'force JVB121'\n        });\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants.get(remoteID);\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || browser.isFirefox()\n            || browser.isWebKitBased()\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text\n * description that will be included in the session terminate message\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceLandmarksEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Starts the participant verification process.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @returns {void}\n */\nJitsiConference.prototype.startVerification = function(participantId) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.startVerification(participant);\n};\n\n/**\n * Marks the given participant as verified. After this is done, MAC verification will\n * be performed and an event will be emitted with the result.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @param {boolean} isVerified - whether the verification was succesfull.\n * @returns {void}\n */\nJitsiConference.prototype.markParticipantVerified = function(participantId, isVerified) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.markParticipantVerified(participant, isVerified);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown',\n\n    SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia'\n};\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\nexport const SLOW_GET_USER_MEDIA = JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA;\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackSourceName(ssrc, sourceName) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        localTracks.forEach((localTrack, localTrackIndex) => {\n            const localSourceNameTrack = getSourceNameForJitsiTrack('peer', localTrack.getType(), localTrackIndex);\n\n            localTrack.setSourceName(localSourceNameTrack);\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","import Logger from '@jitsi/logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    attributes['audio_requested'] = options.devices.includes('audio');\n    attributes['video_requested'] = options.devices.includes('video');\n    attributes['screen_sharing_requested'] = options.devices.includes('desktop');\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    firePermissionPromptIsShownEvent?: boolean;\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ninterface IJitsiMeetJSOptions {\n    enableAnalyticsLogging?: boolean;\n    enableUnifiedOnChrome?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        runInLiteMode?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    }\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default {\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    init(options: IJitsiMeetJSOptions = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n        const flags = options.flags || {};\n\n        // Configure the feature flags.\n        FeatureFlags.init(flags);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            // @ts-ignore\n            JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN, browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n};\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4449);\n"],"names":["root","factory","exports","module","define","amd","self","ljm","require","window","JitsiMeetJS","Object","assign","_mergeNamespaceAndModule","constructor","userId","displayName","isLocalStats","this","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_isDominantSpeaker","_isSilent","_hasLeft","_faceLandmarks","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","silence","Date","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","getFaceLandmarks","setFaceLandmarks","faceLandmarks","addFaceLandmarks","push","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","replace","EventEmitterForwarder","src","dest","addListener","emit","Error","prototype","forward","args","srcEvent","Function","bind","apply","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","forEach","handler","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","error","errHandler","callUnhandledRejectionHandler","randomInt","min","max","Math","floor","random","randomElement","arr","length","RandomUtil","randomHexDigit","randomHexString","len","ret","randomAlphanumStr","result","i","currentExecutingScript","ScriptUtil","loadScript","async","prepend","relativeURL","loadCallback","errorCallback","d","document","tagName","script","createElement","referenceNode","getElementsByTagName","scriptEl","scriptSrc","baseScriptSrc","substring","lastIndexOf","onload","parentNode","insertBefore","appendChild","integerHash","string","char","hash","charCodeAt","pow","abs","names","generateUsername","Logger","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","keys","levels","logLevel","_log","arguments","storeLogsIntervalID","queue","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","arg","ERROR","timestamp","prevMessage","prevMessageText","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","console","globalTransports","addGlobalTransport","transport","indexOf","removeGlobalTransport","transportIdx","splice","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","stack","split","m","match","substr","log","logger","level","Array","slice","call","disableCallerInfo","transports","concat","t","l","logPrefixes","toISOString","id","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","grammar","v","name","reg","o","format","s","u","e","p","z","r","c","b","a","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","params","RegExp","dir2","clksrcExt","mediaClockValue","rateNumerator","rateDenominator","key","obj","parser","writer","write","parse","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","rawName","attachProperties","validLine","test","sdp","session","media","filter","type","rtp","fmtp","j","paramReducer","acc","expr","undefined","reduce","toString","map","candidates","parts","component","ip","port","item","stream","scid","paused","formatRegExp","formatStr","x","makeLine","n","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","numOfLayers","ssrcCache","processVideo","action","isArray","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","_restoreSimulcast","numSsrcs","index","array","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","Uint8Array","code","end","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","create","default","hasOwnProperty","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","href","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","matches","url","ignoreMessage","round","_nearestExecutingScript","eligibleScripts","readyState","err","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","reject","errorListener","removeListener","resolver","eventTargetAgnosticAddListener","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","events","existing","warning","newListener","unshift","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","message","context","listeners","prependListener","prependOnceListener","list","position","originalListener","shift","pop","spliceOne","off","removeAllListeners","rawListeners","eventNames","g","flat","y","nodeType","nonce","noModule","C","getAttribute","setAttribute","head","removeChild","T","E","fn","jquery","toArray","pushStack","merge","prevObject","each","first","eq","last","even","grep","odd","sort","extend","isPlainObject","expando","noop","isEmptyObject","globalEval","makeArray","inArray","guid","support","iterator","h","A","N","ue","S","k","D","L","q","O","P","H","I","B","M","W","F","$","_","U","V","X","Q","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","Y","G","K","J","Z","ee","te","ne","fromCharCode","re","oe","ae","xe","disabled","nodeName","dir","next","childNodes","se","ownerDocument","exec","getElementById","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","sourceIndex","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","attachEvent","attributes","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","attr","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","textContent","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","has","lang","activeElement","hasFocus","tabIndex","enabled","checked","selected","selectedIndex","empty","parent","header","input","button","lt","gt","nth","radio","checkbox","file","password","image","submit","reset","me","we","Ce","Te","Ee","filters","tokenize","compile","selector","select","defaultValue","unique","isXMLDoc","escapeSelector","parseHTML","ready","children","contents","prev","closest","prevAll","add","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","promise","done","fail","then","Callbacks","stopOnFalse","memory","remove","disable","lock","locked","fireWith","fire","Deferred","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","readyException","readyWait","doScroll","toUpperCase","uid","cache","access","hasData","data","removeData","_data","_removeData","dequeue","_queueHooks","clearQueue","composed","getRootNode","style","display","css","body","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","namespace","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","trigger","Event","global","handle","triggered","dispatch","bindType","origType","delegateCount","setup","teardown","removeEvent","fix","delegateTarget","preDispatch","isPropagationStopped","currentTarget","elem","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","originalEvent","load","noBubble","click","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","one","Ae","Ne","Se","ke","De","Le","je","qe","html","clone","_evalUrl","Oe","cleanData","detach","append","before","after","replaceWith","replaceChild","appendTo","prependTo","insertAfter","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","width","minWidth","maxWidth","$e","cssText","marginLeft","right","offsetWidth","parseFloat","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","height","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","orphans","widows","zIndex","zoom","setProperty","isFinite","getBoundingClientRect","left","margin","padding","border","expand","delay","fx","speeds","checkOn","optSelected","radioValue","tt","nt","removeAttr","prop","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","val","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","DOMParser","parseFromString","ft","dt","pt","ht","vt","param","encodeURIComponent","serialize","serializeArray","wrapAll","firstElementChild","wrapInner","wrap","hidden","visible","createHTMLDocument","implementation","offset","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","delegate","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","trim","mt","jQuery","bt","noConflict","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","node","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","size","overArg","func","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","baseIsNative","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","priority","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","track","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","validTag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","loadXML","copyElement","_i","createHtml","cssAttrs","cssName","cssValue","_i2","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","cnode","impNode","xmlGen","importNode","newElem","fragment","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","callback","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","salt","Hi","U_old","responseText","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","querySelector","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","tl","tmh","_md","hashfunc","generateUUID","stringToBytes","uuidToBytes","idx","DNS","URL","rnds","_sha","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","AV1","H264","OPUS","ULPFEC","VP8","VP9","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","DATA_CHANNEL_CLOSED","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","FORWARDED_SOURCES_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","VideoType","IDENTITY_UPDATED","LOCAL_JID","XMPPEvents","JitsiConferenceErrors","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","REDIRECTED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","E2EE_VERIFICATION_AVAILABLE","E2EE_VERIFICATION_READY","E2EE_VERIFICATION_COMPLETED","JVB121_STATUS","KICKED","PARTICIPANT_KICKED","PARTICIPANT_SOURCE_UPDATED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","RECORDER_STATE_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","METADATA_UPDATED","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","TRACK_OWNER_CHANGED","CALLSTATS_SCRIPT_URL","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","devices","gum","constraints","constraintName","constraint","video","failedConstraintName","mandatory","minHeight","getResolutionFromFailedConstraint","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","navigator","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_detect","_name","_version","getName","isChrome","isOpera","isFirefox","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","mediaDevices","getUserMedia","RTCRtpTransceiver","isTwa","matchMedia","_getSafariVersion","_getChromiumBasedVersion","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsVP9","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","getDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","RTCRtpSender","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","mimeType","supportsUnifiedPlan","supportsVADDetection","supportsRTX","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","cs","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","isLocal","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","delete","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","isLocalStatsSupported","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","disconnectAudioContext","connectAudioContext","suspend","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","stats","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","task","duration","observer","observe","buffered","startTime","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","MediaType","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","download","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","getStats","processAudioLevelReport","catch","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","audioCodec","videoCodec","isAudioTrack","participantId","getParticipantId","userResolutions","userFramerates","userCodecs","audio","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","frameRate","framesPerSecond","bytesSent","codecId","codecShortType","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","trackIdentifier","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getLocalSSRC","AUDIO","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","LocalStats","stopLocalStats","getOriginalStream","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","performanceObserverStats","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","startCallStats","endsWith","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","jingleSession","rtc","closeBridgeChannel","participant","getParticipantById","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","leave","_onConferenceRestarted","_onIceConnectionFailed","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","_status","payload","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","dominantSpeakerIsSilent","roomjid","performance","ev","getMediaSessions","processSourceMap","isVideoTrack","videoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","setupStatisticsListeners","setAudioLevel","startSilent","onByteSentStatsReceived","JitsiParticipant","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","_sources","_isMediaTypeMuted","getTracks","_setSources","sourceName","sourceByMediaType","sourceInfo","getBotType","_botType","getConference","getConnectionJid","_connectionJid","getFeatures","getId","getProperty","getRole","getSources","getStatsID","getTracksByMediaType","hasFeature","feature","isAudioMuted","isHidden","isHiddenFromRecorder","isVideoMuted","setBotType","newBotType","setConnectionJid","newJid","newFeatures","setIsReplaced","newIsReplaced","setIsReplacing","newIsReplacing","oldValue","setRole","newRole","supportsDTMF","JitsiConnectionEvents","CONNECTION_FAILED","WRONG_STATE","DISPLAY_NAME_REQUIRED","JitsiConnectionErrors","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","workerUrl","workerBlob","Blob","createObjectURL","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","sender","senderStreams","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","setEncryptionKey","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","v4","E2EEErrors","emojiMapping","sasGenerators","decimal","sasBytes","emoji","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","OLM_KEY_VERIFICATION_MAC_KEY_IDS","kOlmData","OlmAdapterEvents","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_SAS_AVAILABLE","PARTICIPANT_SAS_READY","PARTICIPANT_KEY_UPDATED","PARTICIPANT_VERIFICATION_COMPLETED","OlmAdapter","_conf","_init","_mediaKey","_mediaKeyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","myId","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentMediaKey","clearParticipantSession","free","clearAllParticipantsSessions","markParticipantVerified","isVerified","sasVerification","E2EE_SAS_CHANNEL_VERIFICATION_FAILED","E2EE_SAS_INVALID_SAS_VERIFICATION","sas","sasMacSent","is_their_key_set","_sendSasMac","_olmAccount","Account","_idKeys","identity_keys","get_library_version","_onIdKeysReady","startVerification","SAS","transactionId","startContent","isInitiator","startMessage","idKeys","keyType","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","json","safeJsonParse","lastKey","isEqual","pubKey","get_pubkey","commitment","_computeCommitment","acceptMessage","sasCommitment","keyMessage","keySent","theirKey","E2EE_SAS_COMMITMENT_MISMATCHED","set_their_key","myInfo","theirInfo","generatedSas","generateSas","generate_bytes","mac","baseInfo","calculate_mac","E2EE_SAS_KEYS_MAC_MISMATCH","ed25519","E2EE_SAS_MISSING_KEY","computedMac","E2EE_SAS_MAC_MISMATCH","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","curve25519","mark_keys_as_published","keyList","deviceKeyId","macMessage","olmUtil","Utility","sha256","ManagedKeyHandler","_key","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantSasReady","_onParticipantSasAvailable","_onParticipantVerificationCompleted","_onParticipantJoined","initSessions","_generateKey","updateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","updateCurrentKey","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","testing","disableE2EE","enableEncodedTransformSupport","setEnabled","_runInLiteMode","runInLiteMode","_ssrcRewriting","ssrcRewritingEnabled","isMultiStreamSendSupportEnabled","isRunInLiteModeEnabled","isSsrcRewritingSupported","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","retry","minDelay","base","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","includes","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","REMOVE","MOVE_TO_ROOM","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","sendParticipantToRoom","participantJid","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","isBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","filteredPayload","_filterUpdatePayload","hiddenDomain","filteredRooms","participants","filteredParticipants","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","lobbyRoom","membersOnlyEnabled","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","getBreakoutRooms","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","mainRoomJid","memberRoomJid","msgToSend","RoomMetadata","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","metadata","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","targetJid","hosts","targetUrl","conferenceRequestUrl","mode","focusUserJids","focusUserJid","isFocusJid","focusJid","isExternalAuthEnabled","isSipGatewayEnabled","_createConferenceRequest","rtcstatsEnabled","conferenceRequest","machineUid","_createConferenceIq","_parseConferenceIq","resultIq","vnode","authentication","externalAuth","sendConferenceRequest","_handleIqSuccess","_handleIqError","ok","resultJson","_handleSuccess","statusText","sessionError","notAuthorized","authenticationEnabled","waitMs","reservationErr","errorCode","errorTextNode","errorMsg","invalidSession","anonymousdomain","errorIq","getLoginUrl","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","fromHiddenDomain","presence","xEl","extractIdentityInformation","userInfo","hiddenFromRecorderFeatureEnabled","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","setSubject","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","lobbyRoomOldNode","setAffiliation","grantIQ","kickIQ","lockRoom","onError","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMediaPresenceInfo","endpointId","mutedNode","codecTypeNode","videoTypeNode","codecType","getMemberRole","peerJid","getLastPresence","mucNick","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","endConferenceComponentAddress","MucConnectionPlugin","isRoomCreated","_createSourceExtension","owner","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_getOrCreateRtpDescription","jingle","expandSourcesFromJson","jsonMessageXml","audioRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","MediaDirection","ScreenObtainer","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamId","streamType","screenShareAudio","audioConstraints","optionalConstraints","optional","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","screen","maxHeight","sourceId","sourceType","surfaceSwitching","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","INACTIVE","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","clonedeep","RECVONLY","groups","mids","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","SENDONLY","senders","SENDRECV","transportToJingle","sctpport","sctpmap","sctpAttrs","streams","setupLine","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","jingle2media","__","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","fallback","defer","setImmediate$1","handlePromise","invokeCallback","isAsync","wrapAsync","asyncFn","awaitify","arity","cbArgs","applyEach","eachfn","fns","callArgs","cb","_asyncMap","results","counter","_iteratee","iterCb","breakLoop","callFn","onlyOnce","asyncEachOfLimit","generator","limit","canceled","awaiting","running","replenish","iterDone","iterateeCallback","handleError","eachOfLimit","asyncIterator","isAsyncIterable","nextElem","coll","createArrayIterator","okeys","getIterator","createES2015Iterator","createIterator","looping","eachOfLimit$2","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","eachOf$1","map$1","eachOfSeries$1","DLL","tail","removeLink","newNode","setInitial","cur","testFn","curr","dll","worker","concurrency","numRunning","workersList","drain","saturated","unsaturated","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","started","_tasks","_createCB","tasks","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","pushAsync","kill","unshiftAsync","defineProperties","memo","mapLimit$1","concatLimit$1","mapResults","_createTester","check","testResult","testPassed","consoleFunc","resultArgs","_withoutIndex","_fn","_test","truth","eachLimit$2","eachSeries$1","filterArray","truthValues","filterGeneric","_filter","innerArgs","ensureAsync","newObj","taskCb","criteria","comparator","rest","taskIndex","nextTask","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","JingleSessionState","PENDING","ACTIVE","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","JingleSessionPC","jingleContents","videoContents","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_sourceReceiverConstraints","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","disableRtx","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferredCodec","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","isStable","iceConnectionState","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","configureSenderVideoEncodings","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","getRemoteSourcesRecvMaxFrameHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","sendIceCandidates","cands","sdpMid","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","videoTracks","FeatureFlags","addTracks","addTrack","all","createOffer","offerSdp","setLocalDescription","processLocalSdpForTransceiverInfo","sendSessionInitiate","setAnswer","jingleAnswer","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","setRemoteDescription","newLocalSdp","sendContentModify","jingleOfferAnswerIq","audioTracks","tracks","bridgeSessionId","_responderRenegotiate","setVideoCodecs","preferred","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","newFingerprint","accept","responder","sessionModify","setReceiverVideoConstraint","sourceReceiverConstraints","transportAccept","medialines","sendTransportReject","transportReject","setSenderVideoConstraint","maxFrameHeight","jitsiLocalTrack","getLocalVideoTracks","getSourceName","getLocalVideoTrack","setSenderVideoConstraints","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","getRemoteTracks","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","newSources","mappedSources","addRemoteSsrc","setSourceName","setOwner","_setVideoType","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","remoteSdp","findIndex","desiredDirection","getDesiredMediaDirection","removeSSRCOwners","optionalRemoteSdp","_initiatorRenegotiate","createAnswer","answer","offer","replaceTracks","oldLocalSDP","recvOnlyTransceiver","getTransceivers","currentDirection","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackToPc","_addRemoveTrack","removeTrackFromPc","isRemove","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","sourceMaxFrameHeights","parseSourceMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","getSignaledSourceInfo","sdpDiffer","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","credential","temp","useTurnUdp","iceServers","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","XMPP","token","disconnectInProgress","authenticatedUser","deploymentInfo","_components","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","backendRelease","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFaceLandmarksEvent","faceExpression","jsonString","users","created_timestamp","acceptedStatuses","aprops","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","allocateConferenceFocus","authenticationError","connectionError","CodecSelection","enforcePreferredCodec","p2pDisabledCodec","_isCodecSupported","jvbDisabledCodec","p2pPreferredCodec","jvbPreferredCodec","_selectPreferredCodec","mediaSession","disabledCodec","currentCodec","selectedCodec","remoteParticipants","nonPreferredCodecs","remote","peerMediaInfo","getPeerMediaInfo","getPreferredCodec","BridgeChannel","wsUrl","_channel","_connected","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendReceiverVideoConstraintsMessage","sendSourceVideoTypeMessage","channel","dominantSpeakerEndpoint","previousSpeakers","isActive","active","forwardedSources","jsonObject","logDisabled_","deprecationWarnings_","extractVersion","uastring","pos","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","RTCIceGatherer","compactObject","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","getAudioTracks","getVideoTracks","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","getReceivers","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConstraints","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","attachMediaStream","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","screenObtainer","isDeviceListAvailable","ds","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_attachTTFMTracker","container","_maybeFireTrackAttached","_onTrackAttach","_onTrackDetach","_setHandler","_unregisterHandlers","videoTrack","RTCUtils","getStreamId","getMSID","getTrackId","getTrack","getTrackLabel","getUsageLabel","getVideoType","isLocalAudioTrack","isWebRTCTrackMuted","newAudioLevel","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","cont","_sendBridgeVideoTypeMessage","storedMSID","_originalStream","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","unmute","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","every","sessionMedia","bLine","bundle","msidSemantic","semantic","resStr","toUnifiedPlan","current","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_UPDATED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getPeerSourceInfo","getSSRCOwner","getTrackSourceName","ssrcList","setTrackMuteStatus","setTrackVideoType","updateSsrcOwnersOnLeave","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","_hasHadVideoTrack","_hasHadAudioTrack","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","videoMlines","_usesUnifiedPlan","nameExists","trackIndex","trackIndexParts","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","SdpSimulcast","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_getSsrcAttribute","_generateNewSsrcsForSimulcast","addAssociatedAttributes","_generateSsrc","TrackStreamingStatus","TrackStreamingStatusImpl","isInForwardedSources","isRestoringTimedout","isVideoTrackFrozen","INTERRUPTED","RESTORING","restoringTimer","rtcMutedTimestamp","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","_getVideoFrozenTimeout","isP2PActive","_onP2PStatus","figureOutStreamingStatus","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onForwardedSourcesChanged","onForwardedSourcesChanged","_onLastNValueChanged","clearRtcMutedTimestamp","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","newStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldStreamingStatus","streamingStatus","nowMs","startedMs","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","rTimer","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","HD_BITRATE","SIM_LAYER_RIDS","TPCUtils","bitrateSettings","maxBitratesVideo","standardBitrates","low","standard","high","ssHigh","videoBitrates","encodingBitrates","_getStreamEncodings","localTrack","_getVideoStreamEncodings","maxVideoBitrate","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","findTransceiver","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","calculateEncodingsActiveState","localVideoTrack","newHeight","videoStreamEncodings","_capScreenshareBitrate","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","lowFpsScreenshare","isNewLocalSource","stopped","transceiverMid","_localTrackTransceiverMids","setEncodings","transceivers","updateEncodingsResolution","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","remoteTracks","_addedStreams","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","_senderVideoMaxHeight","_senderMaxHeights","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","times","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","mediaTransferActive","_getDesktopTrackMid","desktopTrack","_getReceiversByEndpointIds","endpoints","remoteTrackIds","audioReceivers","getSynchronizationSources","endpointTracksByMediaType","primarySsrcs","fidLines","getTargetVideoBitrates","remoteTrack","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLine","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","jitsiTrack","isUserStream","toBeRemoved","_removeRemoteTrack","removeRemoteTracks","removedTracks","remoteTracksByMedia","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","codecPreference","mLines","disabledCodecMimeType","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","localSdp","oldTrackSSRC","mediaActive","_ensureSimulcastGroupIsLast","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","localSources","remoteSources","_mungeOpus","enableOpusDtx","opusMaxAverageBitrate","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","_mungeInactive","_initializeDtlsTransport","onstatechange","_setVp9MaxBitrates","isLocalSdp","bitrates","hdBitrate","ssHdBitrate","isSharingScreen","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","videoSender","preference","degradationPreference","encodingsEnabledState","maxBitrates","scaleFactor","layer","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","ConnectionQualityEvents","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_forwardedSources","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldForwardedSources","setReceiverVideoConstraints","sendSourceVideoType","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","startBitrate","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","_broadcastLocalStats","ICE_CONNECTION_STATE_CHANGED","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","kJitsiLiteMode","LiteModeContext","_setupLiteModeForTrack","transformStream","TransformStream","pipeThrough","pipeTo","MAX_HEIGHT","ReceiverVideoConstraints","_maxFrameHeight","defaultConstraints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","videoConstraints","ReceiveVideoController","_rtc","startLastN","channelLastN","_getDefaultSourceReceiverConstraints","remoteVideoTracks","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","mappedConstraints","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_configureConstraintsForLocalSources","_onSenderConstraintsReceived","_propagateSendMaxFrameHeight","sourceConstraints","getActiveMediaSession","sendMaxFrameHeight","_selectSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","RecordingResult","wordArray","TrackRecorder","recorder","AUDIO_WEBM","AUDIO_OGG","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","ondataavailable","dataEvent","recorderToRemove","revokeObjectURL","getRecordingResults","getFileType","Word","word","begin","getWord","getBeginTime","getEndTime","SphinxService","recordingResult","verify","formatResponse","audioBlob","sphinxURL","toReturn","getURL","audioFileBlob","DONE","audioRecorder","objects","filler","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","transcriptionService","transcription","lineLength","blobCallBack","transcriber","getUTCMilliseconds","wordObject","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","ComponentsVersions","addCommandListener","processVersions","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_bindChatRoomEventHandlers","emitAudioMutedEvent","_audioMuteHandler","_doesEndpointSendNewSourceInfo","emitVideoMutedEvent","_videoMuteHandler","emitVideoTypeEvent","_videoTypeHandler","_sourceInfoHandler","sourceInfoJSON","emitEventsFromHere","endpointSourceState","sourceChanged","newMutedState","oldSourceState","newVideoType","newSourceNames","_memberLeftHandler","_logOwnerChangedMessage","lastPresence","legacyGetPeerMediaInfo","mediaInfo","setChatRoom","oldChatRoom","existingOwner","existingName","_getCodecMimeType","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","startRecording","_addSession","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_liteModeContext","_audioSenderLimitReached","_videoSenderLimitReached","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","JitsiMediaDevicesEvents","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","receiveVideoController","sendVideoController","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","userRegion","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","leaveError","isEndConferenceSupported","localtrack","BridgeVideoType","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldVideoType","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_setNewVideoType","videoTypeChanged","presenceChanged","addPromises","removePromises","unlock","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","ignoreDomain","bridgeChannel","firstWsUrl","stopOptions","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","isSIPCallingSupported","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","audioLimitReached","videoLimitReached","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","TRANSPORT_INFO","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","localTrackIndex","localSourceNameTrack","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}