{"version":3,"file":"analytics-ga.min.js","mappings":"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","sources":["webpack://jitsi-meet/./node_modules/@hapi/bourne/lib/index.js","webpack://jitsi-meet/./node_modules/clipboard-copy/index.js","webpack://jitsi-meet/webpack/bootstrap","webpack://jitsi-meet/./react/features/analytics/handlers/GoogleAnalyticsHandler.js","webpack://jitsi-meet/./react/features/base/util/helpers.js","webpack://jitsi-meet/./react/features/analytics/handlers/AbstractHandler.js"],"sourcesContent":["'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy\n\nfunction makeError () {\n  return new DOMException('The request is not allowed', 'NotAllowedError')\n}\n\nasync function copyClipboardApi (text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (!navigator.clipboard) {\n    throw makeError()\n  }\n  return navigator.clipboard.writeText(text)\n}\n\nasync function copyExecCommand (text) {\n  // Put the text to copy into a <span>\n  const span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  span.style.webkitUserSelect = 'auto'\n  span.style.userSelect = 'all'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  const selection = window.getSelection()\n  const range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  let success = false\n  try {\n    success = window.document.execCommand('copy')\n  } finally {\n    // Cleanup\n    selection.removeAllRanges()\n    window.document.body.removeChild(span)\n  }\n\n  if (!success) throw makeError()\n}\n\nasync function clipboardCopy (text) {\n  try {\n    await copyClipboardApi(text)\n  } catch (err) {\n    // ...Otherwise, use document.execCommand() fallback\n    try {\n      await copyExecCommand(text)\n    } catch (err2) {\n      throw (err2 || err || makeError())\n    }\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* global ga */\n\nimport { getJitsiMeetGlobalNS } from '../../base/util';\n\nimport AbstractHandler from './AbstractHandler';\n\n/**\n * Analytics handler for Google Analytics.\n */\nclass GoogleAnalyticsHandler extends AbstractHandler {\n\n    /**\n     * Creates new instance of the GA analytics handler.\n     *\n     * @param {Object} options -\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     */\n    constructor(options) {\n        super(options);\n\n        this._userProperties = {};\n\n        if (!options.googleAnalyticsTrackingId) {\n            throw new Error('Failed to initialize Google Analytics handler, no tracking ID');\n        }\n\n        this._enabled = true;\n        this._initGoogleAnalytics(options);\n    }\n\n    /**\n     * Initializes the ga object.\n     *\n     * @param {Object} options -\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     * @returns {void}\n     */\n    _initGoogleAnalytics(options) {\n        /**\n         * TODO: Keep this local, there's no need to add it to window.\n         */\n        /* eslint-disable */\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n        /* eslint-enable */\n        ga('create', options.googleAnalyticsTrackingId, 'auto');\n        ga('send', 'pageview');\n    }\n\n    /**\n     * Extracts the integer to use for a Google Analytics event's value field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {number} - The integer to use for the 'value' of a Google\n     * analytics event, or NaN if the lib-jitsi-meet event doesn't contain a\n     * suitable value.\n     * @private\n     */\n    _extractValue(event) {\n        let value = event && event.attributes && event.attributes.value;\n\n        // Try to extract an integer from the \"value\" attribute.\n        value = Math.round(parseFloat(value));\n\n        return value;\n    }\n\n    /**\n     * Extracts the string to use for a Google Analytics event's label field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {string} - The string to use for the 'label' of a Google\n     * analytics event.\n     * @private\n     */\n    _extractLabel(event) {\n        const { attributes = {} } = event;\n        const labelsArray\n            = Object.keys(attributes).map(key => `${key}=${attributes[key]}`);\n\n        labelsArray.push(this._userPropertiesString);\n\n        return labelsArray.join('&');\n    }\n\n    /**\n     * Sets the permanent properties for the current session.\n     *\n     * @param {Object} userProps - The permanent portperties.\n     * @returns {void}\n     */\n    setUserProperties(userProps = {}) {\n        if (!this._enabled) {\n            return;\n        }\n\n        // The label field is limited to 500B. We will concatenate all\n        // attributes of the event, except the user agent because it may be\n        // lengthy and is probably included from elsewhere.\n        const filter = [ 'user_agent', 'callstats_name' ];\n\n        this._userPropertiesString\n            = Object.keys(userProps)\n                .filter(key => filter.indexOf(key) === -1)\n                .map(key => `permanent_${key}=${userProps[key]}`)\n                .join('&');\n    }\n\n    /**\n     * This is the entry point of the API. The function sends an event to\n     * google analytics. The format of the event is described in\n     * analyticsAdapter in lib-jitsi-meet.\n     *\n     * @param {Object} event - The event in the format specified by\n     * lib-jitsi-meet.\n     * @returns {void}\n     */\n    sendEvent(event) {\n        if (this._shouldIgnore(event)) {\n            return;\n        }\n\n        const gaEvent = {\n            'eventCategory': 'jitsi-meet',\n            'eventAction': this._extractName(event),\n            'eventLabel': this._extractLabel(event)\n        };\n        const value = this._extractValue(event);\n\n        if (!isNaN(value)) {\n            gaEvent.eventValue = value;\n        }\n\n        ga('send', 'event', gaEvent);\n    }\n\n}\n\nconst globalNS = getJitsiMeetGlobalNS();\n\nglobalNS.analyticsHandlers = globalNS.analyticsHandlers || [];\nglobalNS.analyticsHandlers.push(GoogleAnalyticsHandler);\n","// @flow\n\nimport clipboardCopy from 'clipboard-copy';\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Tries to copy a given text to the clipboard.\n * Returns true if the action succeeds.\n *\n * @param {string} textToCopy - Text to be copied.\n * @returns {Promise<boolean>}\n */\nexport async function copyText(textToCopy: string) {\n    try {\n        await clipboardCopy(textToCopy);\n\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * Creates a deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred(): Object {\n    const deferred = {};\n\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n\n    return deferred;\n}\n\nconst MATCH_OPERATOR_REGEXP = /[|\\\\{}()[\\]^$+*?.-]/g;\n\n/**\n * Escape RegExp special characters.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp.\n *\n * @param {string} s - The regexp string to escape.\n * @returns {string}\n */\nexport function escapeRegexp(s: string) {\n    if (typeof s !== 'string') {\n        throw new TypeError('Expected a string');\n    }\n\n    return s.replace(MATCH_OPERATOR_REGEXP, '\\\\$&');\n}\n\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\nexport function getBaseUrl(w: Object = window) {\n    const doc = w.document;\n    const base = doc.querySelector('base');\n\n    if (base && base.href) {\n        return base.href;\n    }\n\n    const { protocol, host } = w.location;\n\n    return `${protocol}//${host}`;\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    console.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n\n/**\n * Adds alpha to a color css string.\n *\n * @param {string} color - The color string either in rgb... Or #... Format.\n * @param {number} opacity -The opacity(alpha) to apply to the color. Can take a value between 0 and 1, including.\n * @returns {string} - The color with applied alpha.\n */\nexport function setColorAlpha(color: string, opacity: number) {\n    if (!color) {\n        return `rgba(0, 0, 0, ${opacity})`;\n    }\n\n    let b, g, r;\n\n    try {\n        if (color.startsWith('rgb')) {\n            [ r, g, b ] = color.split('(')[1].split(')')[0].split(',').map(c => c.trim());\n        } else if (color.startsWith('#')) {\n            if (color.length === 4) {\n                [ r, g, b ] = parseShorthandColor(color);\n            } else {\n                r = parseInt(color.substring(1, 3), 16);\n                g = parseInt(color.substring(3, 5), 16);\n                b = parseInt(color.substring(5, 7), 16);\n            }\n        } else {\n            return color;\n        }\n\n        return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    } catch {\n        return color;\n    }\n}\n\n/**\n * Gets the hexa rgb values for a shorthand css color.\n *\n * @param {string} color -\n * @returns {Array<number>} - Array containing parsed r, g, b values of the color.\n */\nfunction parseShorthandColor(color) {\n    let b, g, r;\n\n    r = color.substring(1, 2);\n    r += r;\n    r = parseInt(r, 16);\n\n    g = color.substring(2, 3);\n    g += g;\n    g = parseInt(g, 16);\n\n    b = color.substring(3, 4);\n    b += b;\n    b = parseInt(b, 16);\n\n    return [ r, g, b ];\n}\n\n/**\n * Sorts an object by a sort function, same functionality as array.sort().\n *\n * @param {Object} object - The data object.\n * @param {Function} callback - The sort function.\n * @returns {void}\n */\nexport function objectSort(object: Object, callback: Function) {\n    return Object.entries(object)\n        .sort(([ , a ], [ , b ]) => callback(a, b))\n        .reduce((row, [ key, value ]) => {\n            return { ...row,\n                [key]: value };\n        }, {});\n}\n","/**\n * Abstract implementation of analytics handler.\n */\nexport default class AbstractHandler {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters.\n     */\n    constructor(options = {}) {\n        this._enabled = false;\n        this._whiteListedEvents = options.whiteListedEvents;\n\n        // FIXME:\n        // Keeping the list with the very noisy events so that we don't flood with events whoever hasn't configured\n        // white/black lists yet. We need to solve this issue properly by either making these events not so noisy or\n        // by removing them completely from the code.\n        this._blackListedEvents = [\n            ...(options.blackListedEvents || []), // eslint-disable-line no-extra-parens\n            'e2e_rtt', 'rtp.stats', 'rtt.by.region', 'available.device', 'stream.switch.delay', 'ice.state.changed',\n            'ice.duration', 'peer.conn.status.duration'\n        ];\n    }\n\n    /**\n     * Extracts a name for the event from the event properties.\n     *\n     * @param {Object} event - The analytics event.\n     * @returns {string} - The extracted name.\n     */\n    _extractName(event) {\n        // Page events have a single 'name' field.\n        if (event.type === 'page') {\n            return event.name;\n        }\n\n        const {\n            action,\n            actionSubject,\n            source\n        } = event;\n\n        // All events have action, actionSubject, and source fields. All\n        // three fields are required, and often jitsi-meet and\n        // lib-jitsi-meet use the same value when separate values are not\n        // necessary (i.e. event.action == event.actionSubject).\n        // Here we concatenate these three fields, but avoid adding the same\n        // value twice, because it would only make the event's name harder\n        // to read.\n        let name = action;\n\n        if (actionSubject && actionSubject !== action) {\n            name = `${actionSubject}.${action}`;\n        }\n        if (source && source !== action) {\n            name = `${source}.${name}`;\n        }\n\n        return name;\n    }\n\n    /**\n     * Checks if an event should be ignored or not.\n     *\n     * @param {Object} event - The event.\n     * @returns {boolean}\n     */\n    _shouldIgnore(event) {\n        if (!event || !this._enabled) {\n            return true;\n        }\n\n        const name = this._extractName(event);\n\n        if (Array.isArray(this._whiteListedEvents)) {\n            return this._whiteListedEvents.indexOf(name) === -1;\n        }\n\n        if (Array.isArray(this._blackListedEvents)) {\n            return this._blackListedEvents.indexOf(name) !== -1;\n        }\n\n        return false;\n    }\n}\n"],"names":["internals","exports","parse","text","firstOptions","reviver","undefined","options","obj","JSON","protoAction","match","scan","next","length","nodes","node","Object","prototype","hasOwnProperty","call","SyntaxError","__proto__","key","value","push","safeParse","ignoreError","makeError","DOMException","module","async","navigator","clipboard","writeText","copyClipboardApi","err","span","document","createElement","textContent","style","whiteSpace","webkitUserSelect","userSelect","body","appendChild","selection","window","getSelection","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","removeChild","copyExecCommand","err2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalNS","JitsiMeetJS","app","analyticsHandlers","constructor","this","_enabled","_whiteListedEvents","whiteListedEvents","_blackListedEvents","blackListedEvents","_extractName","event","type","name","action","actionSubject","source","_shouldIgnore","Array","isArray","indexOf","super","_userProperties","googleAnalyticsTrackingId","Error","_initGoogleAnalytics","i","s","o","a","m","q","arguments","l","Date","getElementsByTagName","src","parentNode","insertBefore","ga","_extractValue","attributes","Math","round","parseFloat","_extractLabel","labelsArray","keys","map","_userPropertiesString","join","setUserProperties","userProps","filter","sendEvent","gaEvent","isNaN","eventValue"],"sourceRoot":""}